{
  "address": "0xb6de30dAafd5695Bef81BAa677D410a015B6853A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "BidId",
          "type": "uint256"
        }
      ],
      "name": "BidURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ProjectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "GranttId",
          "type": "uint256"
        }
      ],
      "name": "CreateGrantProject",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_EventTokenSearchIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_GrantEventIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_GrantEventURIs",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_GrantProjectIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_GrantVoteIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_JudgerURIs",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_SearchedStore",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "_getSearchedTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bidId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_bidURI",
          "type": "string"
        }
      ],
      "name": "_setBidURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_raised",
          "type": "string"
        }
      ],
      "name": "_setEventRaised",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_eventWallet",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_eventURI",
          "type": "string"
        }
      ],
      "name": "_setEventURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_eventURI",
          "type": "string"
        }
      ],
      "name": "_setGrantEventURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "TokenBidId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "TokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_BidURI",
          "type": "string"
        }
      ],
      "name": "_setTokenBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "EventTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "EventId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "_setTokenEvent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "_setTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_eventid",
          "type": "uint256"
        }
      ],
      "name": "claimToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_bidURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_updatedURI",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_eventid",
          "type": "uint256"
        }
      ],
      "name": "createBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_eventWallet",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_eventURI",
          "type": "string"
        }
      ],
      "name": "createEvent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_eventURI",
          "type": "string"
        }
      ],
      "name": "createGrantEvent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "Wallet",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "ProjectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "GranttId",
          "type": "uint256"
        }
      ],
      "name": "createGrantVote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "eventURI",
      "outputs": [
        {
          "internalType": "string[2]",
          "name": "",
          "type": "string[2]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_bidURI",
          "type": "string"
        }
      ],
      "name": "getBidIdByUri",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "TokenID",
          "type": "uint256"
        }
      ],
      "name": "getBidsSearchToken",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "Grantid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ProjectId",
          "type": "uint256"
        }
      ],
      "name": "getCheckSubmittedProjectGrant",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        }
      ],
      "name": "getEventRaised",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "EventId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "getGetEventsTokenID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "Wallet",
          "type": "string"
        }
      ],
      "name": "getSearchEventbyWallet",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "Grantid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ProjectId",
          "type": "uint256"
        }
      ],
      "name": "getSearchedGrantVoteProject",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "Grantid",
          "type": "uint256"
        }
      ],
      "name": "getSearchedProjectByGrantID",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "TokenID",
          "type": "uint256"
        }
      ],
      "name": "getTotalBid",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "gettokenIdByUri",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "EventID",
          "type": "uint256"
        }
      ],
      "name": "gettokenSearchEventTotal",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "GrantProjectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ProjectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "GranttId",
          "type": "uint256"
        }
      ],
      "name": "setGrantProject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "GrantVoteId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "Wallet",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "ProjectId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "GranttId",
          "type": "string"
        }
      ],
      "name": "setGrantVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalEvent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalGrantEvent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2258d1ad7b728b95ff1424ebf5a73644cba24fe52b3bdb1d9595aba3a47ed7bf",
  "receipt": {
    "to": null,
    "from": "0x43F44Fa7842dED402Fd098e80a04D8BFc5997Ea1",
    "contractAddress": "0xb6de30dAafd5695Bef81BAa677D410a015B6853A",
    "transactionIndex": 0,
    "gasUsed": "4654672",
    "logsBloom": "0x
    "blockHash": "0x18e345a0c59a369656244c0d7c1cc3253afd1a5a4457eac371e711643185397d",
    "transactionHash": "0x2258d1ad7b728b95ff1424ebf5a73644cba24fe52b3bdb1d9595aba3a47ed7bf",
    "logs": [],
    "blockNumber": 12146299,
    "cumulativeGasUsed": "4654672",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "CUSD",
    "cUSD"
  ],
  "numDeployments": 16,
  "solcInputHash": "8a3ee4202ea78f90134399fcec0c547d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"BidId\",\"type\":\"uint256\"}],\"name\":\"BidURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ProjectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"GranttId\",\"type\":\"uint256\"}],\"name\":\"CreateGrantProject\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_EventTokenSearchIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_GrantEventIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_GrantEventURIs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_GrantProjectIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_GrantVoteIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_JudgerURIs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_SearchedStore\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"_getSearchedTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_bidURI\",\"type\":\"string\"}],\"name\":\"_setBidURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_raised\",\"type\":\"string\"}],\"name\":\"_setEventRaised\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_eventWallet\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_eventURI\",\"type\":\"string\"}],\"name\":\"_setEventURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_eventURI\",\"type\":\"string\"}],\"name\":\"_setGrantEventURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"TokenBidId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_BidURI\",\"type\":\"string\"}],\"name\":\"_setTokenBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"EventTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"EventId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"_setTokenEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"_setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_eventid\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_bidURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_updatedURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_eventid\",\"type\":\"uint256\"}],\"name\":\"createBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_eventWallet\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_eventURI\",\"type\":\"string\"}],\"name\":\"createEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_eventURI\",\"type\":\"string\"}],\"name\":\"createGrantEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"Wallet\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"ProjectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"GranttId\",\"type\":\"uint256\"}],\"name\":\"createGrantVote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"eventURI\",\"outputs\":[{\"internalType\":\"string[2]\",\"name\":\"\",\"type\":\"string[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_bidURI\",\"type\":\"string\"}],\"name\":\"getBidIdByUri\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"TokenID\",\"type\":\"uint256\"}],\"name\":\"getBidsSearchToken\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Grantid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ProjectId\",\"type\":\"uint256\"}],\"name\":\"getCheckSubmittedProjectGrant\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"getEventRaised\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"EventId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"getGetEventsTokenID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"Wallet\",\"type\":\"string\"}],\"name\":\"getSearchEventbyWallet\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Grantid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ProjectId\",\"type\":\"uint256\"}],\"name\":\"getSearchedGrantVoteProject\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Grantid\",\"type\":\"uint256\"}],\"name\":\"getSearchedProjectByGrantID\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"TokenID\",\"type\":\"uint256\"}],\"name\":\"getTotalBid\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"gettokenIdByUri\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"EventID\",\"type\":\"uint256\"}],\"name\":\"gettokenSearchEventTotal\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"GrantProjectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ProjectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"GranttId\",\"type\":\"uint256\"}],\"name\":\"setGrantProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"GrantVoteId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"Wallet\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ProjectId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"GranttId\",\"type\":\"string\"}],\"name\":\"setGrantVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalGrantEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CeloERC721.sol\":\"CeloERC721\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x921f012325281f7d81e29c53a13824cf6c2c5d77232065d0d4f3f912e97af6ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/CeloERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ncontract CeloERC721 is ERC721 {\\n\\tuint256 private _tokenIds;\\n\\tuint256 private _bidIds;\\n\\tuint256 private _eventIds;\\n    uint256 public _GrantEventIds;\\n\\tuint256 public _GrantProjectIds;\\n\\tuint256 public _GrantVoteIds;\\n\\tuint256 private _EventTokenIds;\\n\\tuint256 private _TokenBidIds;\\n\\tuint256 public _EventTokenSearchIds;\\n\\tmapping(uint256 => string[2]) private AllEventTokens;\\n\\tmapping(uint256 => string[3]) private AllGrantVotes;\\n    mapping(uint256 => uint256[2]) private AllGrantProject;\\n\\tmapping(uint256 => string[2]) private AllTokensBids;\\n\\tmapping(uint256 => string[2]) public _SearchedStore;\\n\\tmapping(uint256 => string) private _bidURIs;\\n\\tmapping(uint256 => string) private _tokenURIs;\\n\\tmapping(uint256 => string[2]) private _eventURIs;\\n\\tmapping(uint256 => string) public _GrantEventURIs;\\n    mapping(uint256 => string) public  _JudgerURIs;\\n\\tmapping(uint256 => string) private _eventRaised;\\n\\tmapping(string => string) private _eventTokens;\\n\\n\\tconstructor(string memory name, string memory symbol)\\n\\t\\tERC721(name, symbol)\\n\\t{}\\n\\nfunction claimToken(\\n\\t\\taddress _claimer,\\n\\t\\tstring memory _tokenURI,\\n\\t\\tuint256 _eventid\\n\\t) public returns (uint256) {\\n\\t\\t_mint(_claimer, _tokenIds);\\n\\t\\t_setTokenURI(_tokenIds, _tokenURI);\\n\\t\\t_setTokenEvent(_EventTokenIds, _eventid, _tokenURI);\\n\\t\\t_tokenIds++;\\n\\t\\t_EventTokenIds++;\\n\\t\\treturn _tokenIds;\\n\\t}\\n\\n\\nfunction _setTokenEvent(\\n\\t\\tuint256 EventTokenId,\\n\\t\\tuint256 EventId,\\n\\t\\tstring memory _tokenURI\\n\\t) public virtual {\\n\\t\\tAllEventTokens[EventTokenId] = [\\n\\t\\t\\tStrings.toString(EventId),\\n\\t\\t\\tstring(_tokenURI)\\n\\t\\t];\\n\\t}\\nfunction createEvent(string memory _eventWallet,string memory _eventURI)\\n\\t\\tpublic\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\t_setEventURI(_eventIds,_eventWallet, _eventURI);\\n\\t\\t_setEventRaised(_eventIds, \\\"0\\\");\\n\\t\\t_eventIds++;\\n\\n\\t\\treturn _eventIds;\\n\\t}\\n\\t\\n\\nfunction setGrantProject(\\t\\n\\t\\tuint256 GrantProjectId,\\n\\t\\tuint256 ProjectId,\\n\\t\\tuint256 GranttId\\n\\t) public virtual {\\n\\t\\tAllGrantProject[GrantProjectId] = [GranttId,ProjectId];\\n\\n\\t}\\n\\n\\nfunction CreateGrantProject(\\n\\t\\tuint256 ProjectId,\\n\\t\\tuint256 GranttId\\n\\t) public returns (uint256) {\\n\\t\\tsetGrantProject(_GrantProjectIds,ProjectId,GranttId);\\n\\t\\t_GrantProjectIds++;\\n\\t\\t\\n\\t\\treturn _GrantProjectIds;\\n\\t}\\n\\n\\n\\n\\nfunction createGrantEvent(string memory _eventURI)\\n\\t\\tpublic\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\t_setGrantEventURI(_GrantEventIds, _eventURI);\\n\\t\\t_GrantEventIds++;\\n\\n\\t\\treturn _GrantEventIds;\\n\\t}\\n\\nfunction getCheckSubmittedProjectGrant(uint256 Grantid, uint256 ProjectId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (bool)\\n\\t{\\t\\t\\n\\t\\t\\n\\t\\tfor (uint256 i = 0; i < _GrantProjectIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tAllGrantProject[i][0] == Grantid && \\n\\t\\t\\t\\tAllGrantProject[i][1] == ProjectId \\t\\t\\t\\t\\n\\t\\t\\t) {\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\n\\t\\treturn false;\\n\\t}\\n\\n\\nfunction getSearchedProjectByGrantID(uint256 Grantid)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (uint256[] memory)\\n\\t{\\n\\t\\t\\n\\t\\tuint256 _TemporarySearch = 0;\\n\\t\\tuint256 _SearchIds = 0;\\n\\t\\t\\n\\t\\t\\n\\t\\tfor (uint256 i = 0; i < _GrantProjectIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tAllGrantProject[i][0] == Grantid\\n\\t\\t\\t) {\\n\\t\\t\\t\\t_TemporarySearch++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tuint256[] memory _SearchedProject = new uint256[](_TemporarySearch);\\n\\n\\t\\tfor (uint256 i = 0; i < _GrantProjectIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tAllGrantProject[i][0] == Grantid\\n\\t\\t\\t) {\\n\\t\\t\\t\\t_SearchedProject[_SearchIds] = AllGrantProject[i][1];\\n\\t\\t\\t\\t_SearchIds++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\n\\t\\treturn _SearchedProject;\\n\\t}\\n\\nfunction setGrantVote(\\t\\n\\t\\tuint256 GrantVoteId,\\n\\t\\tstring memory Wallet,\\n\\t\\tstring memory  ProjectId,\\n\\t\\tstring memory  GranttId\\n\\t) public virtual {\\n\\t\\tAllGrantVotes[GrantVoteId] = [GranttId,ProjectId,Wallet];\\n\\n\\t}\\n\\n\\nfunction createGrantVote(string memory Wallet,uint256 ProjectId,uint256 GranttId)\\n\\t\\tpublic\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tsetGrantVote(_GrantVoteIds, Wallet,Strings.toString(ProjectId),Strings.toString(GranttId));\\n\\t\\t_GrantVoteIds++;\\n\\n\\t\\treturn _GrantVoteIds;\\n\\t}\\nfunction getSearchedGrantVoteProject(uint256 Grantid,uint256 ProjectId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string[] memory)\\n\\t{\\n\\t\\t\\n\\t\\tuint256 _TemporarySearch = 0;\\n\\t\\tuint256 _SearchIds = 0;\\n\\t\\t\\n\\t\\t\\n\\t\\tfor (uint256 i = 0; i < _GrantVoteIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(AllGrantVotes[i][0])) == keccak256(bytes(Strings.toString(Grantid))) &&\\n\\t\\t\\t\\tkeccak256(bytes(AllGrantVotes[i][1])) == keccak256(bytes(Strings.toString(ProjectId)))\\n\\t\\t\\t\\t\\n\\t\\t\\t) {\\n\\t\\t\\t\\t_TemporarySearch++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tstring[] memory _SearchedProject = new string[](_TemporarySearch);\\n\\n\\t\\n\\t\\tfor (uint256 i = 0; i < _GrantVoteIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(AllGrantVotes[i][0])) == keccak256(bytes(Strings.toString(Grantid))) &&\\n\\t\\t\\t\\tkeccak256(bytes(AllGrantVotes[i][1])) == keccak256(bytes(Strings.toString(ProjectId)))\\n\\t\\t\\t\\t\\n\\t\\t\\t) {\\n\\t\\t\\t_SearchedProject[_SearchIds] = AllGrantVotes[i][2];\\n\\t\\t\\t_SearchIds++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\n\\t\\treturn _SearchedProject;\\n\\t}\\n\\n\\n\\nfunction gettokenIdByUri(string memory _tokenURI)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tfor (uint256 i = 0; i < _tokenIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(_tokenURIs[i])) == keccak256(bytes(_tokenURI))\\n\\t\\t\\t) {\\n\\t\\t\\t\\treturn i;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn 0;\\n\\t}\\n\\nfunction getBidIdByUri(string memory _bidURI)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tfor (uint256 i = 0; i < _bidIds; i++) {\\n\\t\\t\\tif (keccak256(bytes(_bidURIs[i])) == keccak256(bytes(_bidURI))) {\\n\\t\\t\\t\\treturn i;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn 0;\\n\\t}\\n\\nfunction gettokenSearchEventTotal(uint256 EventID)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string[] memory)\\n\\t{\\n\\t\\tstring[] memory _SearchedStoreToken = new string[](10);\\n\\n\\t\\tuint256 _EventTokenSearchIds2 = 0;\\n\\n\\t\\tfor (uint256 i = 0; i < _EventTokenIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(AllEventTokens[i][0])) ==\\n\\t\\t\\t\\tkeccak256(bytes(Strings.toString(EventID)))\\n\\t\\t\\t) {\\n\\t\\t\\t\\t_SearchedStoreToken[_EventTokenSearchIds2] = AllEventTokens[i][\\n\\t\\t\\t\\t\\t1\\n\\t\\t\\t\\t];\\n\\t\\t\\t\\t_EventTokenSearchIds2++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn _SearchedStoreToken;\\n\\t}\\n\\nfunction getSearchEventbyWallet(string memory Wallet)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string[] memory)\\n\\t{\\n\\t\\n\\t\\tuint256 _TemporarySearch = 0;\\n\\t\\tuint256 _SearchIds = 0;\\n\\n\\t\\tfor (uint256 i = 0; i < _eventIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(_eventURIs[i][0])) ==\\n\\t\\t\\t\\tkeccak256(bytes(Wallet))\\n\\t\\t\\t) {\\n\\t\\t\\t\\t_TemporarySearch++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tstring[] memory _SearchedStoreEvents = new string[](_TemporarySearch);\\n\\t\\tfor (uint256 i = 0; i < _eventIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(_eventURIs[i][0])) ==\\n\\t\\t\\t\\tkeccak256(bytes(Wallet))\\n\\t\\t\\t) {\\n\\t\\t\\t\\t_SearchedStoreEvents[_SearchIds] = _eventURIs[i][1];\\n\\t\\t\\t\\t_SearchIds++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\n\\t\\treturn _SearchedStoreEvents;\\n\\t}\\n\\nfunction getGetEventsTokenID(uint256 EventId, string memory _tokenURI)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tfor (uint256 i = 0; i < _EventTokenIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(AllEventTokens[i][0])) ==\\n\\t\\t\\t\\tkeccak256(bytes(Strings.toString(EventId))) &&\\n\\t\\t\\t\\tkeccak256(bytes(AllEventTokens[i][1])) ==\\n\\t\\t\\t\\tkeccak256(bytes(_tokenURI))\\n\\t\\t\\t) {\\n\\t\\t\\t\\treturn i;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn 0;\\n\\t}\\n\\nfunction _getSearchedTokenURI(uint256 _tokenId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string memory)\\n\\t{\\n\\t\\treturn _SearchedStore[_tokenId][0];\\n\\t}\\n\\nfunction _setEventURI(uint256 eventId,  string memory _eventWallet ,string memory _eventURI)\\n\\t\\tpublic\\n\\t\\tvirtual\\n\\t{\\n\\t\\t_eventURIs[eventId] = [\\n\\t\\t\\t_eventWallet,\\n\\t\\t\\t_eventURI\\n\\t\\t];\\n\\t\\t_eventRaised[eventId] = \\\"0\\\";\\n\\t}\\n\\nfunction _setGrantEventURI(uint256 eventId, string memory _eventURI)\\n\\t\\tpublic\\n\\t\\tvirtual\\n\\t{\\n\\t\\t_GrantEventURIs[eventId] = _eventURI;\\n\\t}\\n\\n\\nfunction _setTokenURI(uint256 tokenId, string memory _tokenURI)\\n\\t\\tpublic\\n\\t\\tvirtual\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\t_exists(tokenId),\\n\\t\\t\\t\\\"ERC721Metadata: URI set of nonexistent token\\\"\\n\\t\\t);\\n\\t\\t_tokenURIs[tokenId] = _tokenURI;\\n\\t}\\n\\nfunction eventURI(uint256 eventId) public view returns (string[2] memory) {\\n\\t\\treturn _eventURIs[eventId];\\n\\t}\\n\\nfunction tokenURI(uint256 tokenId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (string memory)\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\t_exists(tokenId),\\n\\t\\t\\t\\\"ERC721Metadata: URI query for nonexistent token\\\"\\n\\t\\t);\\n\\n\\t\\treturn _tokenURIs[tokenId];\\n\\t}\\n\\nfunction totalSupply() public view returns (uint256) {\\n\\t\\treturn _tokenIds;\\n\\t}\\n\\nfunction totalEvent() public view returns (uint256) {\\n\\t\\treturn _eventIds;\\n\\t}\\n\\nfunction totalGrantEvent() public view returns (uint256) {\\n\\t\\treturn _GrantProjectIds;\\n\\t}\\n\\nfunction _setBidURI(uint256 bidId, string memory _bidURI) public virtual {\\n\\t\\t_bidURIs[bidId] = _bidURI;\\n\\t}\\n\\nfunction BidURI(uint256 BidId) public view returns (string memory) {\\n\\t\\treturn _bidURIs[BidId];\\n\\t}\\n\\nfunction getTotalBid(uint256 TokenID)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string[] memory)\\n\\t{\\n\\t\\tstring[] memory _SearchedStoreBid = new string[](10);\\n\\n\\t\\tuint256 _TokenBidSearchIds2 = 0;\\n\\n\\t\\tfor (uint256 i = 0; i < _TokenBidIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(AllTokensBids[i][0])) ==\\n\\t\\t\\t\\tkeccak256(bytes(Strings.toString(TokenID)))\\n\\t\\t\\t) {\\n\\t\\t\\t\\t_SearchedStoreBid[_TokenBidSearchIds2] = AllTokensBids[i][1];\\n\\t\\t\\t\\t_TokenBidSearchIds2++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn _SearchedStoreBid;\\n\\t}\\n\\nfunction getBidsSearchToken(uint256 TokenID)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string[] memory)\\n\\t{\\n\\t\\tstring[] memory _SearchedStoreBid = new string[](10);\\n\\n\\t\\tuint256 _TokenBidSearchIds2 = 0;\\n\\n\\t\\tfor (uint256 i = 0; i < _TokenBidIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(AllTokensBids[i][0])) ==\\n\\t\\t\\t\\tkeccak256(bytes(Strings.toString(TokenID)))\\n\\t\\t\\t) {\\n\\t\\t\\t\\t_SearchedStoreBid[_TokenBidSearchIds2] = AllTokensBids[i][1];\\n\\t\\t\\t\\t_TokenBidSearchIds2++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn _SearchedStoreBid;\\n\\t}\\n\\nfunction _setTokenBid(\\n\\t\\tuint256 TokenBidId,\\n\\t\\tuint256 TokenId,\\n\\t\\tstring memory _BidURI\\n\\t) public virtual {\\n\\t\\tAllTokensBids[TokenBidId] = [\\n\\t\\t\\tStrings.toString(TokenId),\\n\\t\\t\\tstring(_BidURI)\\n\\t\\t];\\n\\t}\\n \\nfunction getEventRaised(uint256 _eventId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string memory)\\n\\t{\\n\\t\\treturn _eventRaised[_eventId];\\n\\t}\\n\\nfunction _setEventRaised(uint256 _eventId, string memory _raised)\\n\\t\\tpublic\\n\\t{\\n\\t\\t_eventRaised[_eventId] = _raised;\\n\\t}\\n\\n \\nfunction createBid(\\n\\t\\tuint256 _tokenId,\\n\\t\\tstring memory _bidURI,\\n\\t\\tstring memory _updatedURI,\\n\\t\\tuint256 _eventid\\n\\t) public   {\\n\\t\\tuint256 _EventTokenId = getGetEventsTokenID(\\n\\t\\t\\t_eventid,\\n\\t\\t\\t_tokenURIs[_tokenId]\\n\\t\\t);\\n\\t\\t_tokenURIs[_tokenId] = _updatedURI;\\n\\t\\t_setTokenEvent(_EventTokenId, _eventid, _updatedURI);\\n\\n\\t\\t_setTokenBid(_TokenBidIds, _tokenId, _bidURI);\\n\\t\\t_TokenBidIds++;\\n\\t\\t_bidIds++;\\n\\t}\\n}\\n\",\"keccak256\":\"0x038a39c4df8902c535da13969a0f605038b0128c77845264f6d5e062948ac768\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162005628380380620056288339818101604052810190620000379190620001a3565b818181600090805190602001906200005192919062000075565b5080600190805190602001906200006a92919062000075565b5050505050620003ac565b8280546200008390620002bd565b90600052602060002090601f016020900481019282620000a75760008555620000f3565b82601f10620000c257805160ff1916838001178555620000f3565b82800160010185558215620000f3579182015b82811115620000f2578251825591602001919060010190620000d5565b5b50905062000102919062000106565b5090565b5b808211156200012157600081600090555060010162000107565b5090565b60006200013c620001368462000251565b62000228565b9050828152602081018484840111156200015b576200015a6200038c565b5b6200016884828562000287565b509392505050565b600082601f83011262000188576200018762000387565b5b81516200019a84826020860162000125565b91505092915050565b60008060408385031215620001bd57620001bc62000396565b5b600083015167ffffffffffffffff811115620001de57620001dd62000391565b5b620001ec8582860162000170565b925050602083015167ffffffffffffffff81111562000210576200020f62000391565b5b6200021e8582860162000170565b9150509250929050565b60006200023462000247565b9050620002428282620002f3565b919050565b6000604051905090565b600067ffffffffffffffff8211156200026f576200026e62000358565b5b6200027a826200039b565b9050602081019050919050565b60005b83811015620002a75780820151818401526020810190506200028a565b83811115620002b7576000848401525b50505050565b60006002820490506001821680620002d657607f821691505b60208210811415620002ed57620002ec62000329565b5b50919050565b620002fe826200039b565b810181811067ffffffffffffffff8211171562000320576200031f62000358565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b61526c80620003bc6000396000f3fe608060405234801561001057600080fd5b506004361061030c5760003560e01c80637cedbc1e1161019d578063c08e953d116100e9578063dfc5e169116100a2578063e985e9c51161007c578063e985e9c514610a69578063eb1d234d14610a99578063f327579414610ac9578063f880eb1914610ae55761030c565b8063dfc5e169146109ed578063e08033d314610a1d578063e257a94c14610a395761030c565b8063c08e953d14610905578063c87b56dd14610935578063cef80b3a14610965578063d45fc51614610983578063d654e993146109b3578063dcbe2ed9146109cf5761030c565b806396d5a73911610156578063a99bee2e11610130578063a99bee2e1461086b578063aed4796114610889578063b10a5dfa146108b9578063b88d4fde146108e95761030c565b806396d5a739146107ef578063a0fd0c6a1461081f578063a22cb4651461084f5761030c565b80637cedbc1e146107075780637eadfa6a1461073757806384eb8f6814610755578063912101cf14610771578063932a196b146107a157806395d89b41146107d15761030c565b806335011d901161025c5780634ef4e80f1161021557806353c227cc116101ef57806353c227cc1461065b578063619581581461068b5780636352211e146106a757806370a08231146106d75761030c565b80634ef4e80f146105cb5780635154380a146105fb578063523796271461062b5761030c565b806335011d90146104d35780633592dd8014610503578063390532711461051f57806342842e0e1461054f578063446a92e31461056b5780634eb083ec1461059b5761030c565b80630da3c49c116102c957806318160ddd116102a357806318160ddd146104395780631e65e1171461045757806323b872dd1461048757806328520ab7146104a35761030c565b80630da3c49c146103e3578063144cbca6146103ff5780631677bf081461041d5761030c565b8063015388681461031157806301ffc9a71461032d57806306fdde031461035d578063081812fc1461037b578063095ea7b3146103ab5780630ae240cf146103c7575b600080fd5b61032b60048036038101906103269190613d78565b610b03565b005b61034760048036038101906103429190613bc1565b610b77565b6040516103549190614686565b60405180910390f35b610365610c59565b60405161037291906146a1565b60405180910390f35b61039560048036038101906103909190613d4b565b610ceb565b6040516103a291906145b9565b60405180910390f35b6103c560048036038101906103c09190613b81565b610d70565b005b6103e160048036038101906103dc9190613e5f565b610e88565b005b6103fd60048036038101906103f89190613f1a565b610ecb565b005b610407610feb565b60405161041491906148a3565b60405180910390f35b61043760048036038101906104329190613d78565b610ff1565b005b61044161101d565b60405161044e91906148a3565b60405180910390f35b610471600480360381019061046c9190613c1b565b611027565b60405161047e9190614642565b60405180910390f35b6104a1600480360381019061049c91906139fc565b61124b565b005b6104bd60048036038101906104b89190613d78565b6112ab565b6040516104ca91906148a3565b60405180910390f35b6104ed60048036038101906104e89190613b12565b611384565b6040516104fa91906148a3565b60405180910390f35b61051d60048036038101906105189190613ff9565b6113e7565b005b61053960048036038101906105349190613fb9565b61142b565b6040516105469190614686565b60405180910390f35b610569600480360381019061056491906139fc565b6114c7565b005b61058560048036038101906105809190613d4b565b6114e7565b60405161059291906146a1565b60405180910390f35b6105b560048036038101906105b09190613d4b565b61158c565b6040516105c291906146a1565b60405180910390f35b6105e560048036038101906105e09190613fb9565b611631565b6040516105f291906148a3565b60405180910390f35b61061560048036038101906106109190613d4b565b611663565b6040516106229190614642565b60405180910390f35b61064560048036038101906106409190613c1b565b611813565b60405161065291906148a3565b60405180910390f35b61067560048036038101906106709190613d4b565b611843565b60405161068291906146a1565b60405180910390f35b6106a560048036038101906106a09190613dd4565b6118e3565b005b6106c160048036038101906106bc9190613d4b565b61197c565b6040516106ce91906145b9565b60405180910390f35b6106f160048036038101906106ec919061398f565b611a2e565b6040516106fe91906148a3565b60405180910390f35b610721600480360381019061071c9190613d4b565b611ae6565b60405161072e91906146a1565b60405180910390f35b61073f611b9f565b60405161074c91906148a3565b60405180910390f35b61076f600480360381019061076a9190613d78565b611ba9565b005b61078b60048036038101906107869190613fb9565b611bd5565b6040516107989190614642565b60405180910390f35b6107bb60048036038101906107b69190613c1b565b611eb4565b6040516107c891906148a3565b60405180910390f35b6107d9611f23565b6040516107e691906146a1565b60405180910390f35b61080960048036038101906108049190613d4b565b611fb5565b6040516108169190614664565b60405180910390f35b61083960048036038101906108349190613d4b565b612117565b6040516108469190614620565b60405180910390f35b61086960048036038101906108649190613ad2565b6121f7565b005b61087361220d565b60405161088091906148a3565b60405180910390f35b6108a3600480360381019061089e9190613d4b565b612213565b6040516108b09190614642565b60405180910390f35b6108d360048036038101906108ce9190613fb9565b6123c3565b6040516108e091906146a1565b60405180910390f35b61090360048036038101906108fe9190613a4f565b612473565b005b61091f600480360381019061091a9190613cdc565b6124d5565b60405161092c91906148a3565b60405180910390f35b61094f600480360381019061094a9190613d4b565b612519565b60405161095c91906146a1565b60405180910390f35b61096d612606565b60405161097a91906148a3565b60405180910390f35b61099d60048036038101906109989190613c1b565b61260c565b6040516109aa91906148a3565b60405180910390f35b6109cd60048036038101906109c89190613ff9565b61267b565b005b6109d76126bf565b6040516109e491906148a3565b60405180910390f35b610a076004803603810190610a029190613d4b565b6126c5565b604051610a1491906146a1565b60405180910390f35b610a376004803603810190610a329190613d78565b612765565b005b610a536004803603810190610a4e9190613c64565b612791565b604051610a6091906148a3565b60405180910390f35b610a836004803603810190610a7e91906139bc565b612804565b604051610a909190614686565b60405180910390f35b610ab36004803603810190610aae9190613d4b565b612898565b604051610ac09190614642565b60405180910390f35b610ae36004803603810190610ade9190614068565b612a48565b005b610aed612a84565b604051610afa91906148a3565b60405180910390f35b610b0c82612a8e565b610b4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4290614823565b60405180910390fd5b80601560008481526020019081526020016000209080519060200190610b72929190613632565b505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610c4257507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610c525750610c5182612afa565b5b9050919050565b606060008054610c6890614bbe565b80601f0160208091040260200160405190810160405280929190818152602001828054610c9490614bbe565b8015610ce15780601f10610cb657610100808354040283529160200191610ce1565b820191906000526020600020905b815481529060010190602001808311610cc457829003601f168201915b5050505050905090565b6000610cf682612a8e565b610d35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2c90614803565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610d7b8261197c565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610dec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de390614863565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610e0b612b64565b73ffffffffffffffffffffffffffffffffffffffff161480610e3a5750610e3981610e34612b64565b612804565b5b610e79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7090614783565b60405180910390fd5b610e838383612b6c565b505050565b60405180606001604052808281526020018381526020018481525060106000868152602001908152602001600020906003610ec49291906136b8565b5050505050565b6000610f7282601560008881526020019081526020016000208054610eef90614bbe565b80601f0160208091040260200160405190810160405280929190818152602001828054610f1b90614bbe565b8015610f685780601f10610f3d57610100808354040283529160200191610f68565b820191906000526020600020905b815481529060010190602001808311610f4b57829003601f168201915b50505050506112ab565b905082601560008781526020019081526020016000209080519060200190610f9b929190613632565b50610fa78183856113e7565b610fb4600d54868661267b565b600d6000815480929190610fc790614c21565b919050555060076000815480929190610fdf90614c21565b91905055505050505050565b600e5481565b80601960008481526020019081526020016000209080519060200190611018929190613632565b505050565b6000600654905090565b606060008060005b6008548110156110a55784805190602001206016600083815260200190815260200160002060006002811061106757611066614d28565b5b0160405161107591906145a2565b6040518091039020141561109257828061108e90614c21565b9350505b808061109d90614c21565b91505061102f565b5060008267ffffffffffffffff8111156110c2576110c1614d57565b5b6040519080825280602002602001820160405280156110f557816020015b60608152602001906001900390816110e05790505b50905060005b60085481101561123f5785805190602001206016600083815260200190815260200160002060006002811061113357611132614d28565b5b0160405161114191906145a2565b6040518091039020141561122c576016600082815260200190815260200160002060016002811061117557611174614d28565b5b01805461118190614bbe565b80601f01602080910402602001604051908101604052809291908181526020018280546111ad90614bbe565b80156111fa5780601f106111cf576101008083540402835291602001916111fa565b820191906000526020600020905b8154815290600101906020018083116111dd57829003601f168201915b505050505082848151811061121257611211614d28565b5b6020026020010181905250828061122890614c21565b9350505b808061123790614c21565b9150506110fb565b50809350505050919050565b61125c611256612b64565b82612c25565b61129b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129290614883565b60405180910390fd5b6112a6838383612d03565b505050565b600080600090505b600c54811015611378576112c684612f6a565b80519060200120600f60008381526020019081526020016000206000600281106112f3576112f2614d28565b5b0160405161130191906145a2565b604051809103902014801561135757508280519060200120600f600083815260200190815260200160002060016002811061133f5761133e614d28565b5b0160405161134d91906145a2565b6040518091039020145b15611365578091505061137e565b808061137090614c21565b9150506112b3565b50600090505b92915050565b6000611392846006546130cb565b61139e60065484610b03565b6113ab600c5483856113e7565b600660008154809291906113be90614c21565b9190505550600c60008154809291906113d690614c21565b919050555060065490509392505050565b60405180604001604052806113fb84612f6a565b815260200182815250600f600085815260200190815260200160002090600261142592919061370b565b50505050565b600080600090505b600a548110156114bb57836011600083815260200190815260200160002060006002811061146457611463614d28565b5b01541480156114995750826011600083815260200190815260200160002060016002811061149557611494614d28565b5b0154145b156114a85760019150506114c1565b80806114b390614c21565b915050611433565b50600090505b92915050565b6114e283838360405180602001604052806000815250612473565b505050565b606060146000838152602001908152602001600020805461150790614bbe565b80601f016020809104026020016040519081016040528092919081815260200182805461153390614bbe565b80156115805780601f1061155557610100808354040283529160200191611580565b820191906000526020600020905b81548152906001019060200180831161156357829003601f168201915b50505050509050919050565b60606019600083815260200190815260200160002080546115ac90614bbe565b80601f01602080910402602001604051908101604052809291908181526020018280546115d890614bbe565b80156116255780601f106115fa57610100808354040283529160200191611625565b820191906000526020600020905b81548152906001019060200180831161160857829003601f168201915b50505050509050919050565b6000611640600a548484612a48565b600a600081548092919061165390614c21565b9190505550600a54905092915050565b60606000600a67ffffffffffffffff81111561168257611681614d57565b5b6040519080825280602002602001820160405280156116b557816020015b60608152602001906001900390816116a05790505b5090506000805b600d54811015611808576116cf85612f6a565b80519060200120601260008381526020019081526020016000206000600281106116fc576116fb614d28565b5b0160405161170a91906145a2565b604051809103902014156117f5576012600082815260200190815260200160002060016002811061173e5761173d614d28565b5b01805461174a90614bbe565b80601f016020809104026020016040519081016040528092919081815260200182805461177690614bbe565b80156117c35780601f10611798576101008083540402835291602001916117c3565b820191906000526020600020905b8154815290600101906020018083116117a657829003601f168201915b50505050508383815181106117db576117da614d28565b5b602002602001018190525081806117f190614c21565b9250505b808061180090614c21565b9150506116bc565b508192505050919050565b600061182160095483611ba9565b6009600081548092919061183490614c21565b91905055506009549050919050565b6018602052806000526040600020600091509050805461186290614bbe565b80601f016020809104026020016040519081016040528092919081815260200182805461188e90614bbe565b80156118db5780601f106118b0576101008083540402835291602001916118db565b820191906000526020600020905b8154815290600101906020018083116118be57829003601f168201915b505050505081565b6040518060400160405280838152602001828152506016600085815260200190815260200160002090600261191992919061370b565b506040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250601960008581526020019081526020016000209080519060200190611976929190613632565b50505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611a25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1c906147c3565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611a9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a96906147a3565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060136000838152602001908152602001600020600060028110611b0e57611b0d614d28565b5b018054611b1a90614bbe565b80601f0160208091040260200160405190810160405280929190818152602001828054611b4690614bbe565b8015611b935780601f10611b6857610100808354040283529160200191611b93565b820191906000526020600020905b815481529060010190602001808311611b7657829003601f168201915b50505050509050919050565b6000600854905090565b80601760008481526020019081526020016000209080519060200190611bd0929190613632565b505050565b606060008060005b600b54811015611cb057611bf086612f6a565b8051906020012060106000838152602001908152602001600020600060038110611c1d57611c1c614d28565b5b01604051611c2b91906145a2565b6040518091039020148015611c895750611c4485612f6a565b8051906020012060106000838152602001908152602001600020600160038110611c7157611c70614d28565b5b01604051611c7f91906145a2565b6040518091039020145b15611c9d578280611c9990614c21565b9350505b8080611ca890614c21565b915050611bdd565b5060008267ffffffffffffffff811115611ccd57611ccc614d57565b5b604051908082528060200260200182016040528015611d0057816020015b6060815260200190600190039081611ceb5790505b50905060005b600b54811015611ea757611d1987612f6a565b8051906020012060106000838152602001908152602001600020600060038110611d4657611d45614d28565b5b01604051611d5491906145a2565b6040518091039020148015611db25750611d6d86612f6a565b8051906020012060106000838152602001908152602001600020600160038110611d9a57611d99614d28565b5b01604051611da891906145a2565b6040518091039020145b15611e945760106000828152602001908152602001600020600260038110611ddd57611ddc614d28565b5b018054611de990614bbe565b80601f0160208091040260200160405190810160405280929190818152602001828054611e1590614bbe565b8015611e625780601f10611e3757610100808354040283529160200191611e62565b820191906000526020600020905b815481529060010190602001808311611e4557829003601f168201915b5050505050828481518110611e7a57611e79614d28565b5b60200260200101819052508280611e9090614c21565b9350505b8080611e9f90614c21565b915050611d06565b5080935050505092915050565b600080600090505b600654811015611f1857828051906020012060156000838152602001908152602001600020604051611eee91906145a2565b60405180910390201415611f055780915050611f1e565b8080611f1090614c21565b915050611ebc565b50600090505b919050565b606060018054611f3290614bbe565b80601f0160208091040260200160405190810160405280929190818152602001828054611f5e90614bbe565b8015611fab5780601f10611f8057610100808354040283529160200191611fab565b820191906000526020600020905b815481529060010190602001808311611f8e57829003601f168201915b5050505050905090565b606060008060005b600a54811015612018578460116000838152602001908152602001600020600060028110611fee57611fed614d28565b5b0154141561200557828061200190614c21565b9350505b808061201090614c21565b915050611fbd565b5060008267ffffffffffffffff81111561203557612034614d57565b5b6040519080825280602002602001820160405280156120635781602001602082028036833780820191505090505b50905060005b600a5481101561210b57856011600083815260200190815260200160002060006002811061209a57612099614d28565b5b015414156120f857601160008281526020019081526020016000206001600281106120c8576120c7614d28565b5b01548284815181106120dd576120dc614d28565b5b60200260200101818152505082806120f490614c21565b9350505b808061210390614c21565b915050612069565b50809350505050919050565b61211f61375e565b60166000838152602001908152602001600020600280602002604051908101604052809291906000905b828210156121ec57838201805461215f90614bbe565b80601f016020809104026020016040519081016040528092919081815260200182805461218b90614bbe565b80156121d85780601f106121ad576101008083540402835291602001916121d8565b820191906000526020600020905b8154815290600101906020018083116121bb57829003601f168201915b505050505081526020019060010190612149565b505050509050919050565b612209612202612b64565b83836132a5565b5050565b60095481565b60606000600a67ffffffffffffffff81111561223257612231614d57565b5b60405190808252806020026020018201604052801561226557816020015b60608152602001906001900390816122505790505b5090506000805b600d548110156123b85761227f85612f6a565b80519060200120601260008381526020019081526020016000206000600281106122ac576122ab614d28565b5b016040516122ba91906145a2565b604051809103902014156123a557601260008281526020019081526020016000206001600281106122ee576122ed614d28565b5b0180546122fa90614bbe565b80601f016020809104026020016040519081016040528092919081815260200182805461232690614bbe565b80156123735780601f1061234857610100808354040283529160200191612373565b820191906000526020600020905b81548152906001019060200180831161235657829003601f168201915b505050505083838151811061238b5761238a614d28565b5b602002602001018190525081806123a190614c21565b9250505b80806123b090614c21565b91505061226c565b508192505050919050565b601360205281600052604060002081600281106123df57600080fd5b016000915091505080546123f290614bbe565b80601f016020809104026020016040519081016040528092919081815260200182805461241e90614bbe565b801561246b5780601f106124405761010080835404028352916020019161246b565b820191906000526020600020905b81548152906001019060200180831161244e57829003601f168201915b505050505081565b61248461247e612b64565b83612c25565b6124c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124ba90614883565b60405180910390fd5b6124cf84848484613412565b50505050565b60006124f5600b54856124e786612f6a565b6124f086612f6a565b610e88565b600b600081548092919061250890614c21565b9190505550600b5490509392505050565b606061252482612a8e565b612563576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161255a90614843565b60405180910390fd5b60156000838152602001908152602001600020805461258190614bbe565b80601f01602080910402602001604051908101604052809291908181526020018280546125ad90614bbe565b80156125fa5780601f106125cf576101008083540402835291602001916125fa565b820191906000526020600020905b8154815290600101906020018083116125dd57829003601f168201915b50505050509050919050565b600a5481565b600080600090505b6007548110156126705782805190602001206014600083815260200190815260200160002060405161264691906145a2565b6040518091039020141561265d5780915050612676565b808061266890614c21565b915050612614565b50600090505b919050565b604051806040016040528061268f84612f6a565b815260200182815250601260008581526020019081526020016000209060026126b992919061370b565b50505050565b600b5481565b601760205280600052604060002060009150905080546126e490614bbe565b80601f016020809104026020016040519081016040528092919081815260200182805461271090614bbe565b801561275d5780601f106127325761010080835404028352916020019161275d565b820191906000526020600020905b81548152906001019060200180831161274057829003601f168201915b505050505081565b8060146000848152602001908152602001600020908051906020019061278c929190613632565b505050565b60006127a060085484846118e3565b6127e16008546040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250610ff1565b600860008154809291906127f490614c21565b9190505550600854905092915050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60606000600a67ffffffffffffffff8111156128b7576128b6614d57565b5b6040519080825280602002602001820160405280156128ea57816020015b60608152602001906001900390816128d55790505b5090506000805b600c54811015612a3d5761290485612f6a565b80519060200120600f600083815260200190815260200160002060006002811061293157612930614d28565b5b0160405161293f91906145a2565b60405180910390201415612a2a57600f600082815260200190815260200160002060016002811061297357612972614d28565b5b01805461297f90614bbe565b80601f01602080910402602001604051908101604052809291908181526020018280546129ab90614bbe565b80156129f85780601f106129cd576101008083540402835291602001916129f8565b820191906000526020600020905b8154815290600101906020018083116129db57829003601f168201915b5050505050838381518110612a1057612a0f614d28565b5b60200260200101819052508180612a2690614c21565b9250505b8080612a3590614c21565b9150506128f1565b508192505050919050565b60405180604001604052808281526020018381525060116000858152602001908152602001600020906002612a7e929190613785565b50505050565b6000600a54905090565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16612bdf8361197c565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000612c3082612a8e565b612c6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c6690614763565b60405180910390fd5b6000612c7a8361197c565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480612cbc5750612cbb8185612804565b5b80612cfa57508373ffffffffffffffffffffffffffffffffffffffff16612ce284610ceb565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16612d238261197c565b73ffffffffffffffffffffffffffffffffffffffff1614612d79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d70906146e3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612de9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612de090614723565b60405180910390fd5b612df483838361346e565b612dff600082612b6c565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612e4f9190614ad4565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612ea69190614a4d565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612f65838383613473565b505050565b60606000821415612fb2576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506130c6565b600082905060005b60008214612fe4578080612fcd90614c21565b915050600a82612fdd9190614aa3565b9150612fba565b60008167ffffffffffffffff81111561300057612fff614d57565b5b6040519080825280601f01601f1916602001820160405280156130325781602001600182028036833780820191505090505b5090505b600085146130bf5760018261304b9190614ad4565b9150600a8561305a9190614c6a565b60306130669190614a4d565b60f81b81838151811061307c5761307b614d28565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856130b89190614aa3565b9450613036565b8093505050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561313b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613132906147e3565b60405180910390fd5b61314481612a8e565b15613184576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161317b90614703565b60405180910390fd5b6131906000838361346e565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546131e09190614a4d565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46132a160008383613473565b5050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415613314576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161330b90614743565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516134059190614686565b60405180910390a3505050565b61341d848484612d03565b61342984848484613478565b613468576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161345f906146c3565b60405180910390fd5b50505050565b505050565b505050565b60006134998473ffffffffffffffffffffffffffffffffffffffff1661360f565b15613602578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026134c2612b64565b8786866040518563ffffffff1660e01b81526004016134e494939291906145d4565b602060405180830381600087803b1580156134fe57600080fd5b505af192505050801561352f57506040513d601f19601f8201168201806040525081019061352c9190613bee565b60015b6135b2573d806000811461355f576040519150601f19603f3d011682016040523d82523d6000602084013e613564565b606091505b506000815114156135aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135a1906146c3565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050613607565b600190505b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b82805461363e90614bbe565b90600052602060002090601f01602090048101928261366057600085556136a7565b82601f1061367957805160ff19168380011785556136a7565b828001600101855582156136a7579182015b828111156136a657825182559160200191906001019061368b565b5b5090506136b491906137c5565b5090565b82600381019282156136fa579160200282015b828111156136f95782518290805190602001906136e9929190613632565b50916020019190600101906136cb565b5b50905061370791906137e2565b5090565b826002810192821561374d579160200282015b8281111561374c57825182908051906020019061373c929190613632565b509160200191906001019061371e565b5b50905061375a91906137e2565b5090565b60405180604001604052806002905b606081526020019060019003908161376d5790505090565b82600281019282156137b4579160200282015b828111156137b3578251825591602001919060010190613798565b5b5090506137c191906137c5565b5090565b5b808211156137de5760008160009055506001016137c6565b5090565b5b8082111561380257600081816137f99190613806565b506001016137e3565b5090565b50805461381290614bbe565b6000825580601f106138245750613843565b601f01602090049060005260206000209081019061384291906137c5565b5b50565b6000613859613854846148e3565b6148be565b90508281526020810184848401111561387557613874614d8b565b5b613880848285614b7c565b509392505050565b600061389b61389684614914565b6148be565b9050828152602081018484840111156138b7576138b6614d8b565b5b6138c2848285614b7c565b509392505050565b6000813590506138d9816151da565b92915050565b6000813590506138ee816151f1565b92915050565b60008135905061390381615208565b92915050565b60008151905061391881615208565b92915050565b600082601f83011261393357613932614d86565b5b8135613943848260208601613846565b91505092915050565b600082601f83011261396157613960614d86565b5b8135613971848260208601613888565b91505092915050565b6000813590506139898161521f565b92915050565b6000602082840312156139a5576139a4614d95565b5b60006139b3848285016138ca565b91505092915050565b600080604083850312156139d3576139d2614d95565b5b60006139e1858286016138ca565b92505060206139f2858286016138ca565b9150509250929050565b600080600060608486031215613a1557613a14614d95565b5b6000613a23868287016138ca565b9350506020613a34868287016138ca565b9250506040613a458682870161397a565b9150509250925092565b60008060008060808587031215613a6957613a68614d95565b5b6000613a77878288016138ca565b9450506020613a88878288016138ca565b9350506040613a998782880161397a565b925050606085013567ffffffffffffffff811115613aba57613ab9614d90565b5b613ac68782880161391e565b91505092959194509250565b60008060408385031215613ae957613ae8614d95565b5b6000613af7858286016138ca565b9250506020613b08858286016138df565b9150509250929050565b600080600060608486031215613b2b57613b2a614d95565b5b6000613b39868287016138ca565b935050602084013567ffffffffffffffff811115613b5a57613b59614d90565b5b613b668682870161394c565b9250506040613b778682870161397a565b9150509250925092565b60008060408385031215613b9857613b97614d95565b5b6000613ba6858286016138ca565b9250506020613bb78582860161397a565b9150509250929050565b600060208284031215613bd757613bd6614d95565b5b6000613be5848285016138f4565b91505092915050565b600060208284031215613c0457613c03614d95565b5b6000613c1284828501613909565b91505092915050565b600060208284031215613c3157613c30614d95565b5b600082013567ffffffffffffffff811115613c4f57613c4e614d90565b5b613c5b8482850161394c565b91505092915050565b60008060408385031215613c7b57613c7a614d95565b5b600083013567ffffffffffffffff811115613c9957613c98614d90565b5b613ca58582860161394c565b925050602083013567ffffffffffffffff811115613cc657613cc5614d90565b5b613cd28582860161394c565b9150509250929050565b600080600060608486031215613cf557613cf4614d95565b5b600084013567ffffffffffffffff811115613d1357613d12614d90565b5b613d1f8682870161394c565b9350506020613d308682870161397a565b9250506040613d418682870161397a565b9150509250925092565b600060208284031215613d6157613d60614d95565b5b6000613d6f8482850161397a565b91505092915050565b60008060408385031215613d8f57613d8e614d95565b5b6000613d9d8582860161397a565b925050602083013567ffffffffffffffff811115613dbe57613dbd614d90565b5b613dca8582860161394c565b9150509250929050565b600080600060608486031215613ded57613dec614d95565b5b6000613dfb8682870161397a565b935050602084013567ffffffffffffffff811115613e1c57613e1b614d90565b5b613e288682870161394c565b925050604084013567ffffffffffffffff811115613e4957613e48614d90565b5b613e558682870161394c565b9150509250925092565b60008060008060808587031215613e7957613e78614d95565b5b6000613e878782880161397a565b945050602085013567ffffffffffffffff811115613ea857613ea7614d90565b5b613eb48782880161394c565b935050604085013567ffffffffffffffff811115613ed557613ed4614d90565b5b613ee18782880161394c565b925050606085013567ffffffffffffffff811115613f0257613f01614d90565b5b613f0e8782880161394c565b91505092959194509250565b60008060008060808587031215613f3457613f33614d95565b5b6000613f428782880161397a565b945050602085013567ffffffffffffffff811115613f6357613f62614d90565b5b613f6f8782880161394c565b935050604085013567ffffffffffffffff811115613f9057613f8f614d90565b5b613f9c8782880161394c565b9250506060613fad8782880161397a565b91505092959194509250565b60008060408385031215613fd057613fcf614d95565b5b6000613fde8582860161397a565b9250506020613fef8582860161397a565b9150509250929050565b60008060006060848603121561401257614011614d95565b5b60006140208682870161397a565b93505060206140318682870161397a565b925050604084013567ffffffffffffffff81111561405257614051614d90565b5b61405e8682870161394c565b9150509250925092565b60008060006060848603121561408157614080614d95565b5b600061408f8682870161397a565b93505060206140a08682870161397a565b92505060406140b18682870161397a565b9150509250925092565b60006140c78383614305565b905092915050565b60006140db8383614584565b60208301905092915050565b6140f081614b08565b82525050565b600061410182614984565b61410b81856149e2565b93508360208202850161411d85614945565b8060005b85811015614159578484038952815161413a85826140bb565b9450614145836149bb565b925060208a01995050600181019050614121565b50829750879550505050505092915050565b60006141768261498f565b61418081856149ed565b9350836020820285016141928561494f565b8060005b858110156141ce57848403895281516141af85826140bb565b94506141ba836149c8565b925060208a01995050600181019050614196565b50829750879550505050505092915050565b60006141eb8261499a565b6141f581856149fe565b93506142008361495f565b8060005b8381101561423157815161421888826140cf565b9750614223836149d5565b925050600181019050614204565b5085935050505092915050565b61424781614b1a565b82525050565b6000614258826149a5565b6142628185614a0f565b9350614272818560208601614b8b565b61427b81614d9a565b840191505092915050565b6000815461429381614bbe565b61429d8186614a20565b945060018216600081146142b857600181146142c9576142fc565b60ff198316865281860193506142fc565b6142d28561496f565b60005b838110156142f4578154818901526001820191506020810190506142d5565b838801955050505b50505092915050565b6000614310826149b0565b61431a8185614a2b565b935061432a818560208601614b8b565b61433381614d9a565b840191505092915050565b6000614349826149b0565b6143538185614a3c565b9350614363818560208601614b8b565b61436c81614d9a565b840191505092915050565b6000614384603283614a3c565b915061438f82614dab565b604082019050919050565b60006143a7602583614a3c565b91506143b282614dfa565b604082019050919050565b60006143ca601c83614a3c565b91506143d582614e49565b602082019050919050565b60006143ed602483614a3c565b91506143f882614e72565b604082019050919050565b6000614410601983614a3c565b915061441b82614ec1565b602082019050919050565b6000614433602c83614a3c565b915061443e82614eea565b604082019050919050565b6000614456603883614a3c565b915061446182614f39565b604082019050919050565b6000614479602a83614a3c565b915061448482614f88565b604082019050919050565b600061449c602983614a3c565b91506144a782614fd7565b604082019050919050565b60006144bf602083614a3c565b91506144ca82615026565b602082019050919050565b60006144e2602c83614a3c565b91506144ed8261504f565b604082019050919050565b6000614505602c83614a3c565b91506145108261509e565b604082019050919050565b6000614528602f83614a3c565b9150614533826150ed565b604082019050919050565b600061454b602183614a3c565b91506145568261513c565b604082019050919050565b600061456e603183614a3c565b91506145798261518b565b604082019050919050565b61458d81614b72565b82525050565b61459c81614b72565b82525050565b60006145ae8284614286565b915081905092915050565b60006020820190506145ce60008301846140e7565b92915050565b60006080820190506145e960008301876140e7565b6145f660208301866140e7565b6146036040830185614593565b8181036060830152614615818461424d565b905095945050505050565b6000602082019050818103600083015261463a81846140f6565b905092915050565b6000602082019050818103600083015261465c818461416b565b905092915050565b6000602082019050818103600083015261467e81846141e0565b905092915050565b600060208201905061469b600083018461423e565b92915050565b600060208201905081810360008301526146bb818461433e565b905092915050565b600060208201905081810360008301526146dc81614377565b9050919050565b600060208201905081810360008301526146fc8161439a565b9050919050565b6000602082019050818103600083015261471c816143bd565b9050919050565b6000602082019050818103600083015261473c816143e0565b9050919050565b6000602082019050818103600083015261475c81614403565b9050919050565b6000602082019050818103600083015261477c81614426565b9050919050565b6000602082019050818103600083015261479c81614449565b9050919050565b600060208201905081810360008301526147bc8161446c565b9050919050565b600060208201905081810360008301526147dc8161448f565b9050919050565b600060208201905081810360008301526147fc816144b2565b9050919050565b6000602082019050818103600083015261481c816144d5565b9050919050565b6000602082019050818103600083015261483c816144f8565b9050919050565b6000602082019050818103600083015261485c8161451b565b9050919050565b6000602082019050818103600083015261487c8161453e565b9050919050565b6000602082019050818103600083015261489c81614561565b9050919050565b60006020820190506148b86000830184614593565b92915050565b60006148c86148d9565b90506148d48282614bf0565b919050565b6000604051905090565b600067ffffffffffffffff8211156148fe576148fd614d57565b5b61490782614d9a565b9050602081019050919050565b600067ffffffffffffffff82111561492f5761492e614d57565b5b61493882614d9a565b9050602081019050919050565b6000819050919050565b6000819050602082019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600060029050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000614a5882614b72565b9150614a6383614b72565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614a9857614a97614c9b565b5b828201905092915050565b6000614aae82614b72565b9150614ab983614b72565b925082614ac957614ac8614cca565b5b828204905092915050565b6000614adf82614b72565b9150614aea83614b72565b925082821015614afd57614afc614c9b565b5b828203905092915050565b6000614b1382614b52565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015614ba9578082015181840152602081019050614b8e565b83811115614bb8576000848401525b50505050565b60006002820490506001821680614bd657607f821691505b60208210811415614bea57614be9614cf9565b5b50919050565b614bf982614d9a565b810181811067ffffffffffffffff82111715614c1857614c17614d57565b5b80604052505050565b6000614c2c82614b72565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614c5f57614c5e614c9b565b5b600182019050919050565b6000614c7582614b72565b9150614c8083614b72565b925082614c9057614c8f614cca565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920736574206f66206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b6151e381614b08565b81146151ee57600080fd5b50565b6151fa81614b1a565b811461520557600080fd5b50565b61521181614b26565b811461521c57600080fd5b50565b61522881614b72565b811461523357600080fd5b5056fea26469706673582212204ec5cb847db84b01570bea2d6b29842e9d336d5691b54ec91088a315d3223b9164736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061030c5760003560e01c80637cedbc1e1161019d578063c08e953d116100e9578063dfc5e169116100a2578063e985e9c51161007c578063e985e9c514610a69578063eb1d234d14610a99578063f327579414610ac9578063f880eb1914610ae55761030c565b8063dfc5e169146109ed578063e08033d314610a1d578063e257a94c14610a395761030c565b8063c08e953d14610905578063c87b56dd14610935578063cef80b3a14610965578063d45fc51614610983578063d654e993146109b3578063dcbe2ed9146109cf5761030c565b806396d5a73911610156578063a99bee2e11610130578063a99bee2e1461086b578063aed4796114610889578063b10a5dfa146108b9578063b88d4fde146108e95761030c565b806396d5a739146107ef578063a0fd0c6a1461081f578063a22cb4651461084f5761030c565b80637cedbc1e146107075780637eadfa6a1461073757806384eb8f6814610755578063912101cf14610771578063932a196b146107a157806395d89b41146107d15761030c565b806335011d901161025c5780634ef4e80f1161021557806353c227cc116101ef57806353c227cc1461065b578063619581581461068b5780636352211e146106a757806370a08231146106d75761030c565b80634ef4e80f146105cb5780635154380a146105fb578063523796271461062b5761030c565b806335011d90146104d35780633592dd8014610503578063390532711461051f57806342842e0e1461054f578063446a92e31461056b5780634eb083ec1461059b5761030c565b80630da3c49c116102c957806318160ddd116102a357806318160ddd146104395780631e65e1171461045757806323b872dd1461048757806328520ab7146104a35761030c565b80630da3c49c146103e3578063144cbca6146103ff5780631677bf081461041d5761030c565b8063015388681461031157806301ffc9a71461032d57806306fdde031461035d578063081812fc1461037b578063095ea7b3146103ab5780630ae240cf146103c7575b600080fd5b61032b60048036038101906103269190613d78565b610b03565b005b61034760048036038101906103429190613bc1565b610b77565b6040516103549190614686565b60405180910390f35b610365610c59565b60405161037291906146a1565b60405180910390f35b61039560048036038101906103909190613d4b565b610ceb565b6040516103a291906145b9565b60405180910390f35b6103c560048036038101906103c09190613b81565b610d70565b005b6103e160048036038101906103dc9190613e5f565b610e88565b005b6103fd60048036038101906103f89190613f1a565b610ecb565b005b610407610feb565b60405161041491906148a3565b60405180910390f35b61043760048036038101906104329190613d78565b610ff1565b005b61044161101d565b60405161044e91906148a3565b60405180910390f35b610471600480360381019061046c9190613c1b565b611027565b60405161047e9190614642565b60405180910390f35b6104a1600480360381019061049c91906139fc565b61124b565b005b6104bd60048036038101906104b89190613d78565b6112ab565b6040516104ca91906148a3565b60405180910390f35b6104ed60048036038101906104e89190613b12565b611384565b6040516104fa91906148a3565b60405180910390f35b61051d60048036038101906105189190613ff9565b6113e7565b005b61053960048036038101906105349190613fb9565b61142b565b6040516105469190614686565b60405180910390f35b610569600480360381019061056491906139fc565b6114c7565b005b61058560048036038101906105809190613d4b565b6114e7565b60405161059291906146a1565b60405180910390f35b6105b560048036038101906105b09190613d4b565b61158c565b6040516105c291906146a1565b60405180910390f35b6105e560048036038101906105e09190613fb9565b611631565b6040516105f291906148a3565b60405180910390f35b61061560048036038101906106109190613d4b565b611663565b6040516106229190614642565b60405180910390f35b61064560048036038101906106409190613c1b565b611813565b60405161065291906148a3565b60405180910390f35b61067560048036038101906106709190613d4b565b611843565b60405161068291906146a1565b60405180910390f35b6106a560048036038101906106a09190613dd4565b6118e3565b005b6106c160048036038101906106bc9190613d4b565b61197c565b6040516106ce91906145b9565b60405180910390f35b6106f160048036038101906106ec919061398f565b611a2e565b6040516106fe91906148a3565b60405180910390f35b610721600480360381019061071c9190613d4b565b611ae6565b60405161072e91906146a1565b60405180910390f35b61073f611b9f565b60405161074c91906148a3565b60405180910390f35b61076f600480360381019061076a9190613d78565b611ba9565b005b61078b60048036038101906107869190613fb9565b611bd5565b6040516107989190614642565b60405180910390f35b6107bb60048036038101906107b69190613c1b565b611eb4565b6040516107c891906148a3565b60405180910390f35b6107d9611f23565b6040516107e691906146a1565b60405180910390f35b61080960048036038101906108049190613d4b565b611fb5565b6040516108169190614664565b60405180910390f35b61083960048036038101906108349190613d4b565b612117565b6040516108469190614620565b60405180910390f35b61086960048036038101906108649190613ad2565b6121f7565b005b61087361220d565b60405161088091906148a3565b60405180910390f35b6108a3600480360381019061089e9190613d4b565b612213565b6040516108b09190614642565b60405180910390f35b6108d360048036038101906108ce9190613fb9565b6123c3565b6040516108e091906146a1565b60405180910390f35b61090360048036038101906108fe9190613a4f565b612473565b005b61091f600480360381019061091a9190613cdc565b6124d5565b60405161092c91906148a3565b60405180910390f35b61094f600480360381019061094a9190613d4b565b612519565b60405161095c91906146a1565b60405180910390f35b61096d612606565b60405161097a91906148a3565b60405180910390f35b61099d60048036038101906109989190613c1b565b61260c565b6040516109aa91906148a3565b60405180910390f35b6109cd60048036038101906109c89190613ff9565b61267b565b005b6109d76126bf565b6040516109e491906148a3565b60405180910390f35b610a076004803603810190610a029190613d4b565b6126c5565b604051610a1491906146a1565b60405180910390f35b610a376004803603810190610a329190613d78565b612765565b005b610a536004803603810190610a4e9190613c64565b612791565b604051610a6091906148a3565b60405180910390f35b610a836004803603810190610a7e91906139bc565b612804565b604051610a909190614686565b60405180910390f35b610ab36004803603810190610aae9190613d4b565b612898565b604051610ac09190614642565b60405180910390f35b610ae36004803603810190610ade9190614068565b612a48565b005b610aed612a84565b604051610afa91906148a3565b60405180910390f35b610b0c82612a8e565b610b4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4290614823565b60405180910390fd5b80601560008481526020019081526020016000209080519060200190610b72929190613632565b505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610c4257507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610c525750610c5182612afa565b5b9050919050565b606060008054610c6890614bbe565b80601f0160208091040260200160405190810160405280929190818152602001828054610c9490614bbe565b8015610ce15780601f10610cb657610100808354040283529160200191610ce1565b820191906000526020600020905b815481529060010190602001808311610cc457829003601f168201915b5050505050905090565b6000610cf682612a8e565b610d35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2c90614803565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610d7b8261197c565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610dec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de390614863565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610e0b612b64565b73ffffffffffffffffffffffffffffffffffffffff161480610e3a5750610e3981610e34612b64565b612804565b5b610e79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7090614783565b60405180910390fd5b610e838383612b6c565b505050565b60405180606001604052808281526020018381526020018481525060106000868152602001908152602001600020906003610ec49291906136b8565b5050505050565b6000610f7282601560008881526020019081526020016000208054610eef90614bbe565b80601f0160208091040260200160405190810160405280929190818152602001828054610f1b90614bbe565b8015610f685780601f10610f3d57610100808354040283529160200191610f68565b820191906000526020600020905b815481529060010190602001808311610f4b57829003601f168201915b50505050506112ab565b905082601560008781526020019081526020016000209080519060200190610f9b929190613632565b50610fa78183856113e7565b610fb4600d54868661267b565b600d6000815480929190610fc790614c21565b919050555060076000815480929190610fdf90614c21565b91905055505050505050565b600e5481565b80601960008481526020019081526020016000209080519060200190611018929190613632565b505050565b6000600654905090565b606060008060005b6008548110156110a55784805190602001206016600083815260200190815260200160002060006002811061106757611066614d28565b5b0160405161107591906145a2565b6040518091039020141561109257828061108e90614c21565b9350505b808061109d90614c21565b91505061102f565b5060008267ffffffffffffffff8111156110c2576110c1614d57565b5b6040519080825280602002602001820160405280156110f557816020015b60608152602001906001900390816110e05790505b50905060005b60085481101561123f5785805190602001206016600083815260200190815260200160002060006002811061113357611132614d28565b5b0160405161114191906145a2565b6040518091039020141561122c576016600082815260200190815260200160002060016002811061117557611174614d28565b5b01805461118190614bbe565b80601f01602080910402602001604051908101604052809291908181526020018280546111ad90614bbe565b80156111fa5780601f106111cf576101008083540402835291602001916111fa565b820191906000526020600020905b8154815290600101906020018083116111dd57829003601f168201915b505050505082848151811061121257611211614d28565b5b6020026020010181905250828061122890614c21565b9350505b808061123790614c21565b9150506110fb565b50809350505050919050565b61125c611256612b64565b82612c25565b61129b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129290614883565b60405180910390fd5b6112a6838383612d03565b505050565b600080600090505b600c54811015611378576112c684612f6a565b80519060200120600f60008381526020019081526020016000206000600281106112f3576112f2614d28565b5b0160405161130191906145a2565b604051809103902014801561135757508280519060200120600f600083815260200190815260200160002060016002811061133f5761133e614d28565b5b0160405161134d91906145a2565b6040518091039020145b15611365578091505061137e565b808061137090614c21565b9150506112b3565b50600090505b92915050565b6000611392846006546130cb565b61139e60065484610b03565b6113ab600c5483856113e7565b600660008154809291906113be90614c21565b9190505550600c60008154809291906113d690614c21565b919050555060065490509392505050565b60405180604001604052806113fb84612f6a565b815260200182815250600f600085815260200190815260200160002090600261142592919061370b565b50505050565b600080600090505b600a548110156114bb57836011600083815260200190815260200160002060006002811061146457611463614d28565b5b01541480156114995750826011600083815260200190815260200160002060016002811061149557611494614d28565b5b0154145b156114a85760019150506114c1565b80806114b390614c21565b915050611433565b50600090505b92915050565b6114e283838360405180602001604052806000815250612473565b505050565b606060146000838152602001908152602001600020805461150790614bbe565b80601f016020809104026020016040519081016040528092919081815260200182805461153390614bbe565b80156115805780601f1061155557610100808354040283529160200191611580565b820191906000526020600020905b81548152906001019060200180831161156357829003601f168201915b50505050509050919050565b60606019600083815260200190815260200160002080546115ac90614bbe565b80601f01602080910402602001604051908101604052809291908181526020018280546115d890614bbe565b80156116255780601f106115fa57610100808354040283529160200191611625565b820191906000526020600020905b81548152906001019060200180831161160857829003601f168201915b50505050509050919050565b6000611640600a548484612a48565b600a600081548092919061165390614c21565b9190505550600a54905092915050565b60606000600a67ffffffffffffffff81111561168257611681614d57565b5b6040519080825280602002602001820160405280156116b557816020015b60608152602001906001900390816116a05790505b5090506000805b600d54811015611808576116cf85612f6a565b80519060200120601260008381526020019081526020016000206000600281106116fc576116fb614d28565b5b0160405161170a91906145a2565b604051809103902014156117f5576012600082815260200190815260200160002060016002811061173e5761173d614d28565b5b01805461174a90614bbe565b80601f016020809104026020016040519081016040528092919081815260200182805461177690614bbe565b80156117c35780601f10611798576101008083540402835291602001916117c3565b820191906000526020600020905b8154815290600101906020018083116117a657829003601f168201915b50505050508383815181106117db576117da614d28565b5b602002602001018190525081806117f190614c21565b9250505b808061180090614c21565b9150506116bc565b508192505050919050565b600061182160095483611ba9565b6009600081548092919061183490614c21565b91905055506009549050919050565b6018602052806000526040600020600091509050805461186290614bbe565b80601f016020809104026020016040519081016040528092919081815260200182805461188e90614bbe565b80156118db5780601f106118b0576101008083540402835291602001916118db565b820191906000526020600020905b8154815290600101906020018083116118be57829003601f168201915b505050505081565b6040518060400160405280838152602001828152506016600085815260200190815260200160002090600261191992919061370b565b506040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250601960008581526020019081526020016000209080519060200190611976929190613632565b50505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611a25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1c906147c3565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611a9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a96906147a3565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060136000838152602001908152602001600020600060028110611b0e57611b0d614d28565b5b018054611b1a90614bbe565b80601f0160208091040260200160405190810160405280929190818152602001828054611b4690614bbe565b8015611b935780601f10611b6857610100808354040283529160200191611b93565b820191906000526020600020905b815481529060010190602001808311611b7657829003601f168201915b50505050509050919050565b6000600854905090565b80601760008481526020019081526020016000209080519060200190611bd0929190613632565b505050565b606060008060005b600b54811015611cb057611bf086612f6a565b8051906020012060106000838152602001908152602001600020600060038110611c1d57611c1c614d28565b5b01604051611c2b91906145a2565b6040518091039020148015611c895750611c4485612f6a565b8051906020012060106000838152602001908152602001600020600160038110611c7157611c70614d28565b5b01604051611c7f91906145a2565b6040518091039020145b15611c9d578280611c9990614c21565b9350505b8080611ca890614c21565b915050611bdd565b5060008267ffffffffffffffff811115611ccd57611ccc614d57565b5b604051908082528060200260200182016040528015611d0057816020015b6060815260200190600190039081611ceb5790505b50905060005b600b54811015611ea757611d1987612f6a565b8051906020012060106000838152602001908152602001600020600060038110611d4657611d45614d28565b5b01604051611d5491906145a2565b6040518091039020148015611db25750611d6d86612f6a565b8051906020012060106000838152602001908152602001600020600160038110611d9a57611d99614d28565b5b01604051611da891906145a2565b6040518091039020145b15611e945760106000828152602001908152602001600020600260038110611ddd57611ddc614d28565b5b018054611de990614bbe565b80601f0160208091040260200160405190810160405280929190818152602001828054611e1590614bbe565b8015611e625780601f10611e3757610100808354040283529160200191611e62565b820191906000526020600020905b815481529060010190602001808311611e4557829003601f168201915b5050505050828481518110611e7a57611e79614d28565b5b60200260200101819052508280611e9090614c21565b9350505b8080611e9f90614c21565b915050611d06565b5080935050505092915050565b600080600090505b600654811015611f1857828051906020012060156000838152602001908152602001600020604051611eee91906145a2565b60405180910390201415611f055780915050611f1e565b8080611f1090614c21565b915050611ebc565b50600090505b919050565b606060018054611f3290614bbe565b80601f0160208091040260200160405190810160405280929190818152602001828054611f5e90614bbe565b8015611fab5780601f10611f8057610100808354040283529160200191611fab565b820191906000526020600020905b815481529060010190602001808311611f8e57829003601f168201915b5050505050905090565b606060008060005b600a54811015612018578460116000838152602001908152602001600020600060028110611fee57611fed614d28565b5b0154141561200557828061200190614c21565b9350505b808061201090614c21565b915050611fbd565b5060008267ffffffffffffffff81111561203557612034614d57565b5b6040519080825280602002602001820160405280156120635781602001602082028036833780820191505090505b50905060005b600a5481101561210b57856011600083815260200190815260200160002060006002811061209a57612099614d28565b5b015414156120f857601160008281526020019081526020016000206001600281106120c8576120c7614d28565b5b01548284815181106120dd576120dc614d28565b5b60200260200101818152505082806120f490614c21565b9350505b808061210390614c21565b915050612069565b50809350505050919050565b61211f61375e565b60166000838152602001908152602001600020600280602002604051908101604052809291906000905b828210156121ec57838201805461215f90614bbe565b80601f016020809104026020016040519081016040528092919081815260200182805461218b90614bbe565b80156121d85780601f106121ad576101008083540402835291602001916121d8565b820191906000526020600020905b8154815290600101906020018083116121bb57829003601f168201915b505050505081526020019060010190612149565b505050509050919050565b612209612202612b64565b83836132a5565b5050565b60095481565b60606000600a67ffffffffffffffff81111561223257612231614d57565b5b60405190808252806020026020018201604052801561226557816020015b60608152602001906001900390816122505790505b5090506000805b600d548110156123b85761227f85612f6a565b80519060200120601260008381526020019081526020016000206000600281106122ac576122ab614d28565b5b016040516122ba91906145a2565b604051809103902014156123a557601260008281526020019081526020016000206001600281106122ee576122ed614d28565b5b0180546122fa90614bbe565b80601f016020809104026020016040519081016040528092919081815260200182805461232690614bbe565b80156123735780601f1061234857610100808354040283529160200191612373565b820191906000526020600020905b81548152906001019060200180831161235657829003601f168201915b505050505083838151811061238b5761238a614d28565b5b602002602001018190525081806123a190614c21565b9250505b80806123b090614c21565b91505061226c565b508192505050919050565b601360205281600052604060002081600281106123df57600080fd5b016000915091505080546123f290614bbe565b80601f016020809104026020016040519081016040528092919081815260200182805461241e90614bbe565b801561246b5780601f106124405761010080835404028352916020019161246b565b820191906000526020600020905b81548152906001019060200180831161244e57829003601f168201915b505050505081565b61248461247e612b64565b83612c25565b6124c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124ba90614883565b60405180910390fd5b6124cf84848484613412565b50505050565b60006124f5600b54856124e786612f6a565b6124f086612f6a565b610e88565b600b600081548092919061250890614c21565b9190505550600b5490509392505050565b606061252482612a8e565b612563576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161255a90614843565b60405180910390fd5b60156000838152602001908152602001600020805461258190614bbe565b80601f01602080910402602001604051908101604052809291908181526020018280546125ad90614bbe565b80156125fa5780601f106125cf576101008083540402835291602001916125fa565b820191906000526020600020905b8154815290600101906020018083116125dd57829003601f168201915b50505050509050919050565b600a5481565b600080600090505b6007548110156126705782805190602001206014600083815260200190815260200160002060405161264691906145a2565b6040518091039020141561265d5780915050612676565b808061266890614c21565b915050612614565b50600090505b919050565b604051806040016040528061268f84612f6a565b815260200182815250601260008581526020019081526020016000209060026126b992919061370b565b50505050565b600b5481565b601760205280600052604060002060009150905080546126e490614bbe565b80601f016020809104026020016040519081016040528092919081815260200182805461271090614bbe565b801561275d5780601f106127325761010080835404028352916020019161275d565b820191906000526020600020905b81548152906001019060200180831161274057829003601f168201915b505050505081565b8060146000848152602001908152602001600020908051906020019061278c929190613632565b505050565b60006127a060085484846118e3565b6127e16008546040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250610ff1565b600860008154809291906127f490614c21565b9190505550600854905092915050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60606000600a67ffffffffffffffff8111156128b7576128b6614d57565b5b6040519080825280602002602001820160405280156128ea57816020015b60608152602001906001900390816128d55790505b5090506000805b600c54811015612a3d5761290485612f6a565b80519060200120600f600083815260200190815260200160002060006002811061293157612930614d28565b5b0160405161293f91906145a2565b60405180910390201415612a2a57600f600082815260200190815260200160002060016002811061297357612972614d28565b5b01805461297f90614bbe565b80601f01602080910402602001604051908101604052809291908181526020018280546129ab90614bbe565b80156129f85780601f106129cd576101008083540402835291602001916129f8565b820191906000526020600020905b8154815290600101906020018083116129db57829003601f168201915b5050505050838381518110612a1057612a0f614d28565b5b60200260200101819052508180612a2690614c21565b9250505b8080612a3590614c21565b9150506128f1565b508192505050919050565b60405180604001604052808281526020018381525060116000858152602001908152602001600020906002612a7e929190613785565b50505050565b6000600a54905090565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16612bdf8361197c565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000612c3082612a8e565b612c6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c6690614763565b60405180910390fd5b6000612c7a8361197c565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480612cbc5750612cbb8185612804565b5b80612cfa57508373ffffffffffffffffffffffffffffffffffffffff16612ce284610ceb565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16612d238261197c565b73ffffffffffffffffffffffffffffffffffffffff1614612d79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d70906146e3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612de9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612de090614723565b60405180910390fd5b612df483838361346e565b612dff600082612b6c565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612e4f9190614ad4565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612ea69190614a4d565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612f65838383613473565b505050565b60606000821415612fb2576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506130c6565b600082905060005b60008214612fe4578080612fcd90614c21565b915050600a82612fdd9190614aa3565b9150612fba565b60008167ffffffffffffffff81111561300057612fff614d57565b5b6040519080825280601f01601f1916602001820160405280156130325781602001600182028036833780820191505090505b5090505b600085146130bf5760018261304b9190614ad4565b9150600a8561305a9190614c6a565b60306130669190614a4d565b60f81b81838151811061307c5761307b614d28565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856130b89190614aa3565b9450613036565b8093505050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561313b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613132906147e3565b60405180910390fd5b61314481612a8e565b15613184576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161317b90614703565b60405180910390fd5b6131906000838361346e565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546131e09190614a4d565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46132a160008383613473565b5050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415613314576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161330b90614743565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516134059190614686565b60405180910390a3505050565b61341d848484612d03565b61342984848484613478565b613468576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161345f906146c3565b60405180910390fd5b50505050565b505050565b505050565b60006134998473ffffffffffffffffffffffffffffffffffffffff1661360f565b15613602578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026134c2612b64565b8786866040518563ffffffff1660e01b81526004016134e494939291906145d4565b602060405180830381600087803b1580156134fe57600080fd5b505af192505050801561352f57506040513d601f19601f8201168201806040525081019061352c9190613bee565b60015b6135b2573d806000811461355f576040519150601f19603f3d011682016040523d82523d6000602084013e613564565b606091505b506000815114156135aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135a1906146c3565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050613607565b600190505b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b82805461363e90614bbe565b90600052602060002090601f01602090048101928261366057600085556136a7565b82601f1061367957805160ff19168380011785556136a7565b828001600101855582156136a7579182015b828111156136a657825182559160200191906001019061368b565b5b5090506136b491906137c5565b5090565b82600381019282156136fa579160200282015b828111156136f95782518290805190602001906136e9929190613632565b50916020019190600101906136cb565b5b50905061370791906137e2565b5090565b826002810192821561374d579160200282015b8281111561374c57825182908051906020019061373c929190613632565b509160200191906001019061371e565b5b50905061375a91906137e2565b5090565b60405180604001604052806002905b606081526020019060019003908161376d5790505090565b82600281019282156137b4579160200282015b828111156137b3578251825591602001919060010190613798565b5b5090506137c191906137c5565b5090565b5b808211156137de5760008160009055506001016137c6565b5090565b5b8082111561380257600081816137f99190613806565b506001016137e3565b5090565b50805461381290614bbe565b6000825580601f106138245750613843565b601f01602090049060005260206000209081019061384291906137c5565b5b50565b6000613859613854846148e3565b6148be565b90508281526020810184848401111561387557613874614d8b565b5b613880848285614b7c565b509392505050565b600061389b61389684614914565b6148be565b9050828152602081018484840111156138b7576138b6614d8b565b5b6138c2848285614b7c565b509392505050565b6000813590506138d9816151da565b92915050565b6000813590506138ee816151f1565b92915050565b60008135905061390381615208565b92915050565b60008151905061391881615208565b92915050565b600082601f83011261393357613932614d86565b5b8135613943848260208601613846565b91505092915050565b600082601f83011261396157613960614d86565b5b8135613971848260208601613888565b91505092915050565b6000813590506139898161521f565b92915050565b6000602082840312156139a5576139a4614d95565b5b60006139b3848285016138ca565b91505092915050565b600080604083850312156139d3576139d2614d95565b5b60006139e1858286016138ca565b92505060206139f2858286016138ca565b9150509250929050565b600080600060608486031215613a1557613a14614d95565b5b6000613a23868287016138ca565b9350506020613a34868287016138ca565b9250506040613a458682870161397a565b9150509250925092565b60008060008060808587031215613a6957613a68614d95565b5b6000613a77878288016138ca565b9450506020613a88878288016138ca565b9350506040613a998782880161397a565b925050606085013567ffffffffffffffff811115613aba57613ab9614d90565b5b613ac68782880161391e565b91505092959194509250565b60008060408385031215613ae957613ae8614d95565b5b6000613af7858286016138ca565b9250506020613b08858286016138df565b9150509250929050565b600080600060608486031215613b2b57613b2a614d95565b5b6000613b39868287016138ca565b935050602084013567ffffffffffffffff811115613b5a57613b59614d90565b5b613b668682870161394c565b9250506040613b778682870161397a565b9150509250925092565b60008060408385031215613b9857613b97614d95565b5b6000613ba6858286016138ca565b9250506020613bb78582860161397a565b9150509250929050565b600060208284031215613bd757613bd6614d95565b5b6000613be5848285016138f4565b91505092915050565b600060208284031215613c0457613c03614d95565b5b6000613c1284828501613909565b91505092915050565b600060208284031215613c3157613c30614d95565b5b600082013567ffffffffffffffff811115613c4f57613c4e614d90565b5b613c5b8482850161394c565b91505092915050565b60008060408385031215613c7b57613c7a614d95565b5b600083013567ffffffffffffffff811115613c9957613c98614d90565b5b613ca58582860161394c565b925050602083013567ffffffffffffffff811115613cc657613cc5614d90565b5b613cd28582860161394c565b9150509250929050565b600080600060608486031215613cf557613cf4614d95565b5b600084013567ffffffffffffffff811115613d1357613d12614d90565b5b613d1f8682870161394c565b9350506020613d308682870161397a565b9250506040613d418682870161397a565b9150509250925092565b600060208284031215613d6157613d60614d95565b5b6000613d6f8482850161397a565b91505092915050565b60008060408385031215613d8f57613d8e614d95565b5b6000613d9d8582860161397a565b925050602083013567ffffffffffffffff811115613dbe57613dbd614d90565b5b613dca8582860161394c565b9150509250929050565b600080600060608486031215613ded57613dec614d95565b5b6000613dfb8682870161397a565b935050602084013567ffffffffffffffff811115613e1c57613e1b614d90565b5b613e288682870161394c565b925050604084013567ffffffffffffffff811115613e4957613e48614d90565b5b613e558682870161394c565b9150509250925092565b60008060008060808587031215613e7957613e78614d95565b5b6000613e878782880161397a565b945050602085013567ffffffffffffffff811115613ea857613ea7614d90565b5b613eb48782880161394c565b935050604085013567ffffffffffffffff811115613ed557613ed4614d90565b5b613ee18782880161394c565b925050606085013567ffffffffffffffff811115613f0257613f01614d90565b5b613f0e8782880161394c565b91505092959194509250565b60008060008060808587031215613f3457613f33614d95565b5b6000613f428782880161397a565b945050602085013567ffffffffffffffff811115613f6357613f62614d90565b5b613f6f8782880161394c565b935050604085013567ffffffffffffffff811115613f9057613f8f614d90565b5b613f9c8782880161394c565b9250506060613fad8782880161397a565b91505092959194509250565b60008060408385031215613fd057613fcf614d95565b5b6000613fde8582860161397a565b9250506020613fef8582860161397a565b9150509250929050565b60008060006060848603121561401257614011614d95565b5b60006140208682870161397a565b93505060206140318682870161397a565b925050604084013567ffffffffffffffff81111561405257614051614d90565b5b61405e8682870161394c565b9150509250925092565b60008060006060848603121561408157614080614d95565b5b600061408f8682870161397a565b93505060206140a08682870161397a565b92505060406140b18682870161397a565b9150509250925092565b60006140c78383614305565b905092915050565b60006140db8383614584565b60208301905092915050565b6140f081614b08565b82525050565b600061410182614984565b61410b81856149e2565b93508360208202850161411d85614945565b8060005b85811015614159578484038952815161413a85826140bb565b9450614145836149bb565b925060208a01995050600181019050614121565b50829750879550505050505092915050565b60006141768261498f565b61418081856149ed565b9350836020820285016141928561494f565b8060005b858110156141ce57848403895281516141af85826140bb565b94506141ba836149c8565b925060208a01995050600181019050614196565b50829750879550505050505092915050565b60006141eb8261499a565b6141f581856149fe565b93506142008361495f565b8060005b8381101561423157815161421888826140cf565b9750614223836149d5565b925050600181019050614204565b5085935050505092915050565b61424781614b1a565b82525050565b6000614258826149a5565b6142628185614a0f565b9350614272818560208601614b8b565b61427b81614d9a565b840191505092915050565b6000815461429381614bbe565b61429d8186614a20565b945060018216600081146142b857600181146142c9576142fc565b60ff198316865281860193506142fc565b6142d28561496f565b60005b838110156142f4578154818901526001820191506020810190506142d5565b838801955050505b50505092915050565b6000614310826149b0565b61431a8185614a2b565b935061432a818560208601614b8b565b61433381614d9a565b840191505092915050565b6000614349826149b0565b6143538185614a3c565b9350614363818560208601614b8b565b61436c81614d9a565b840191505092915050565b6000614384603283614a3c565b915061438f82614dab565b604082019050919050565b60006143a7602583614a3c565b91506143b282614dfa565b604082019050919050565b60006143ca601c83614a3c565b91506143d582614e49565b602082019050919050565b60006143ed602483614a3c565b91506143f882614e72565b604082019050919050565b6000614410601983614a3c565b915061441b82614ec1565b602082019050919050565b6000614433602c83614a3c565b915061443e82614eea565b604082019050919050565b6000614456603883614a3c565b915061446182614f39565b604082019050919050565b6000614479602a83614a3c565b915061448482614f88565b604082019050919050565b600061449c602983614a3c565b91506144a782614fd7565b604082019050919050565b60006144bf602083614a3c565b91506144ca82615026565b602082019050919050565b60006144e2602c83614a3c565b91506144ed8261504f565b604082019050919050565b6000614505602c83614a3c565b91506145108261509e565b604082019050919050565b6000614528602f83614a3c565b9150614533826150ed565b604082019050919050565b600061454b602183614a3c565b91506145568261513c565b604082019050919050565b600061456e603183614a3c565b91506145798261518b565b604082019050919050565b61458d81614b72565b82525050565b61459c81614b72565b82525050565b60006145ae8284614286565b915081905092915050565b60006020820190506145ce60008301846140e7565b92915050565b60006080820190506145e960008301876140e7565b6145f660208301866140e7565b6146036040830185614593565b8181036060830152614615818461424d565b905095945050505050565b6000602082019050818103600083015261463a81846140f6565b905092915050565b6000602082019050818103600083015261465c818461416b565b905092915050565b6000602082019050818103600083015261467e81846141e0565b905092915050565b600060208201905061469b600083018461423e565b92915050565b600060208201905081810360008301526146bb818461433e565b905092915050565b600060208201905081810360008301526146dc81614377565b9050919050565b600060208201905081810360008301526146fc8161439a565b9050919050565b6000602082019050818103600083015261471c816143bd565b9050919050565b6000602082019050818103600083015261473c816143e0565b9050919050565b6000602082019050818103600083015261475c81614403565b9050919050565b6000602082019050818103600083015261477c81614426565b9050919050565b6000602082019050818103600083015261479c81614449565b9050919050565b600060208201905081810360008301526147bc8161446c565b9050919050565b600060208201905081810360008301526147dc8161448f565b9050919050565b600060208201905081810360008301526147fc816144b2565b9050919050565b6000602082019050818103600083015261481c816144d5565b9050919050565b6000602082019050818103600083015261483c816144f8565b9050919050565b6000602082019050818103600083015261485c8161451b565b9050919050565b6000602082019050818103600083015261487c8161453e565b9050919050565b6000602082019050818103600083015261489c81614561565b9050919050565b60006020820190506148b86000830184614593565b92915050565b60006148c86148d9565b90506148d48282614bf0565b919050565b6000604051905090565b600067ffffffffffffffff8211156148fe576148fd614d57565b5b61490782614d9a565b9050602081019050919050565b600067ffffffffffffffff82111561492f5761492e614d57565b5b61493882614d9a565b9050602081019050919050565b6000819050919050565b6000819050602082019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600060029050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000614a5882614b72565b9150614a6383614b72565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614a9857614a97614c9b565b5b828201905092915050565b6000614aae82614b72565b9150614ab983614b72565b925082614ac957614ac8614cca565b5b828204905092915050565b6000614adf82614b72565b9150614aea83614b72565b925082821015614afd57614afc614c9b565b5b828203905092915050565b6000614b1382614b52565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015614ba9578082015181840152602081019050614b8e565b83811115614bb8576000848401525b50505050565b60006002820490506001821680614bd657607f821691505b60208210811415614bea57614be9614cf9565b5b50919050565b614bf982614d9a565b810181811067ffffffffffffffff82111715614c1857614c17614d57565b5b80604052505050565b6000614c2c82614b72565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614c5f57614c5e614c9b565b5b600182019050919050565b6000614c7582614b72565b9150614c8083614b72565b925082614c9057614c8f614cca565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920736574206f66206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b6151e381614b08565b81146151ee57600080fd5b50565b6151fa81614b1a565b811461520557600080fd5b50565b61521181614b26565b811461521c57600080fd5b50565b61522881614b72565b811461523357600080fd5b5056fea26469706673582212204ec5cb847db84b01570bea2d6b29842e9d336d5691b54ec91088a315d3223b9164736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 27,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 31,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 35,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 39,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 45,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1590,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1592,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_bidIds",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1594,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_eventIds",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1596,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_GrantEventIds",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1598,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_GrantProjectIds",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1600,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_GrantVoteIds",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 1602,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_EventTokenIds",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 1604,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_TokenBidIds",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 1606,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_EventTokenSearchIds",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 1612,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "AllEventTokens",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_array(t_string_storage)2_storage)"
      },
      {
        "astId": 1618,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "AllGrantVotes",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_array(t_string_storage)3_storage)"
      },
      {
        "astId": 1624,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "AllGrantProject",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_array(t_uint256)2_storage)"
      },
      {
        "astId": 1630,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "AllTokensBids",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_array(t_string_storage)2_storage)"
      },
      {
        "astId": 1636,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_SearchedStore",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_array(t_string_storage)2_storage)"
      },
      {
        "astId": 1640,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_bidURIs",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1644,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1650,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_eventURIs",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_uint256,t_array(t_string_storage)2_storage)"
      },
      {
        "astId": 1654,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_GrantEventURIs",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1658,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_JudgerURIs",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1662,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_eventRaised",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1666,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_eventTokens",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_string_memory_ptr,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)2_storage": {
        "base": "t_string_storage",
        "encoding": "inplace",
        "label": "string[2]",
        "numberOfBytes": "64"
      },
      "t_array(t_string_storage)3_storage": {
        "base": "t_string_storage",
        "encoding": "inplace",
        "label": "string[3]",
        "numberOfBytes": "96"
      },
      "t_array(t_uint256)2_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[2]",
        "numberOfBytes": "64"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_string_storage)2_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string[2])",
        "numberOfBytes": "32",
        "value": "t_array(t_string_storage)2_storage"
      },
      "t_mapping(t_uint256,t_array(t_string_storage)3_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string[3])",
        "numberOfBytes": "32",
        "value": "t_array(t_string_storage)3_storage"
      },
      "t_mapping(t_uint256,t_array(t_uint256)2_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[2])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)2_storage"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}