{
  "address": "0xc00c8BcFf8dd5BbBee28d062051e3178cB651671",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "BidId",
          "type": "uint256"
        }
      ],
      "name": "BidURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ProjectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "GranttId",
          "type": "uint256"
        }
      ],
      "name": "CreateGrantProject",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_EventTokenSearchIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_GrantEventIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_GrantEventURIs",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_GrantProjectIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_JudgerURIs",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_SearchedStore",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "_getSearchedTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bidId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_bidURI",
          "type": "string"
        }
      ],
      "name": "_setBidURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_raised",
          "type": "string"
        }
      ],
      "name": "_setEventRaised",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_eventWallet",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_eventURI",
          "type": "string"
        }
      ],
      "name": "_setEventURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_eventURI",
          "type": "string"
        }
      ],
      "name": "_setGrantEventURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "TokenBidId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "TokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_BidURI",
          "type": "string"
        }
      ],
      "name": "_setTokenBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "EventTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "EventId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "_setTokenEvent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "_setTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_eventid",
          "type": "uint256"
        }
      ],
      "name": "claimToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_bidURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_updatedURI",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_eventid",
          "type": "uint256"
        }
      ],
      "name": "createBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_eventWallet",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_eventURI",
          "type": "string"
        }
      ],
      "name": "createEvent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_eventURI",
          "type": "string"
        }
      ],
      "name": "createGrantEvent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "eventURI",
      "outputs": [
        {
          "internalType": "string[2]",
          "name": "",
          "type": "string[2]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_bidURI",
          "type": "string"
        }
      ],
      "name": "getBidIdByUri",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "TokenID",
          "type": "uint256"
        }
      ],
      "name": "getBidsSearchToken",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        }
      ],
      "name": "getEventRaised",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "EventId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "getGetEventsTokenID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "Wallet",
          "type": "string"
        }
      ],
      "name": "getSearchEventbyWallet",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "Grantid",
          "type": "uint256"
        }
      ],
      "name": "getSearchedProjectByGrantID",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "TokenID",
          "type": "uint256"
        }
      ],
      "name": "getTotalBid",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "gettokenIdByUri",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "EventID",
          "type": "uint256"
        }
      ],
      "name": "gettokenSearchEventTotal",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "GrantProjectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ProjectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "GranttId",
          "type": "uint256"
        }
      ],
      "name": "setGrantProject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalEvent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalGrantEvent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2406fecf244dc0886cded865e3ad17e5741368760758f836a8aeb54cbf5bac7b",
  "receipt": {
    "to": null,
    "from": "0x43F44Fa7842dED402Fd098e80a04D8BFc5997Ea1",
    "contractAddress": "0xc00c8BcFf8dd5BbBee28d062051e3178cB651671",
    "transactionIndex": 0,
    "gasUsed": "4270474",
    "logsBloom": "0x
    "blockHash": "0x5f286194b4f55d2fab8f45cfaedfe6110b100fb8a795c617c283636ff17f49f4",
    "transactionHash": "0x2406fecf244dc0886cded865e3ad17e5741368760758f836a8aeb54cbf5bac7b",
    "logs": [],
    "blockNumber": 12138015,
    "cumulativeGasUsed": "4270474",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "CUSD",
    "cUSD"
  ],
  "numDeployments": 12,
  "solcInputHash": "21d4977fe6055fdda96dd56e9d7ca793",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"BidId\",\"type\":\"uint256\"}],\"name\":\"BidURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ProjectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"GranttId\",\"type\":\"uint256\"}],\"name\":\"CreateGrantProject\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_EventTokenSearchIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_GrantEventIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_GrantEventURIs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_GrantProjectIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_JudgerURIs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_SearchedStore\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"_getSearchedTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_bidURI\",\"type\":\"string\"}],\"name\":\"_setBidURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_raised\",\"type\":\"string\"}],\"name\":\"_setEventRaised\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_eventWallet\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_eventURI\",\"type\":\"string\"}],\"name\":\"_setEventURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_eventURI\",\"type\":\"string\"}],\"name\":\"_setGrantEventURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"TokenBidId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_BidURI\",\"type\":\"string\"}],\"name\":\"_setTokenBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"EventTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"EventId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"_setTokenEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"_setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_eventid\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_bidURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_updatedURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_eventid\",\"type\":\"uint256\"}],\"name\":\"createBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_eventWallet\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_eventURI\",\"type\":\"string\"}],\"name\":\"createEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_eventURI\",\"type\":\"string\"}],\"name\":\"createGrantEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"eventURI\",\"outputs\":[{\"internalType\":\"string[2]\",\"name\":\"\",\"type\":\"string[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_bidURI\",\"type\":\"string\"}],\"name\":\"getBidIdByUri\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"TokenID\",\"type\":\"uint256\"}],\"name\":\"getBidsSearchToken\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"getEventRaised\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"EventId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"getGetEventsTokenID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"Wallet\",\"type\":\"string\"}],\"name\":\"getSearchEventbyWallet\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Grantid\",\"type\":\"uint256\"}],\"name\":\"getSearchedProjectByGrantID\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"TokenID\",\"type\":\"uint256\"}],\"name\":\"getTotalBid\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"gettokenIdByUri\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"EventID\",\"type\":\"uint256\"}],\"name\":\"gettokenSearchEventTotal\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"GrantProjectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ProjectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"GranttId\",\"type\":\"uint256\"}],\"name\":\"setGrantProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalGrantEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CeloERC721.sol\":\"CeloERC721\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x921f012325281f7d81e29c53a13824cf6c2c5d77232065d0d4f3f912e97af6ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/CeloERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ncontract CeloERC721 is ERC721 {\\n\\tuint256 private _tokenIds;\\n\\tuint256 private _bidIds;\\n\\tuint256 private _eventIds;\\n    uint256 public _GrantEventIds;\\n\\tuint256 public _GrantProjectIds;\\n\\tuint256 private _EventTokenIds;\\n\\tuint256 private _TokenBidIds;\\n\\tuint256 public _EventTokenSearchIds;\\n\\tmapping(uint256 => string[2]) private AllEventTokens;\\n    mapping(uint256 => uint256[2]) private AllGrantProject;\\n\\tmapping(uint256 => string[2]) private AllTokensBids;\\n\\tmapping(uint256 => string[2]) public _SearchedStore;\\n\\tmapping(uint256 => string) private _bidURIs;\\n\\tmapping(uint256 => string) private _tokenURIs;\\n\\tmapping(uint256 => string[2]) private _eventURIs;\\n\\tmapping(uint256 => string) public _GrantEventURIs;\\n    mapping(uint256 => string) public  _JudgerURIs;\\n\\tmapping(uint256 => string) private _eventRaised;\\n\\tmapping(string => string) private _eventTokens;\\n\\n\\tconstructor(string memory name, string memory symbol)\\n\\t\\tERC721(name, symbol)\\n\\t{}\\n\\nfunction claimToken(\\n\\t\\taddress _claimer,\\n\\t\\tstring memory _tokenURI,\\n\\t\\tuint256 _eventid\\n\\t) public returns (uint256) {\\n\\t\\t_mint(_claimer, _tokenIds);\\n\\t\\t_setTokenURI(_tokenIds, _tokenURI);\\n\\t\\t_setTokenEvent(_EventTokenIds, _eventid, _tokenURI);\\n\\t\\t_tokenIds++;\\n\\t\\t_EventTokenIds++;\\n\\t\\treturn _tokenIds;\\n\\t}\\n\\n\\nfunction _setTokenEvent(\\n\\t\\tuint256 EventTokenId,\\n\\t\\tuint256 EventId,\\n\\t\\tstring memory _tokenURI\\n\\t) public virtual {\\n\\t\\tAllEventTokens[EventTokenId] = [\\n\\t\\t\\tStrings.toString(EventId),\\n\\t\\t\\tstring(_tokenURI)\\n\\t\\t];\\n\\t}\\nfunction createEvent(string memory _eventWallet,string memory _eventURI)\\n\\t\\tpublic\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\t_setEventURI(_eventIds,_eventWallet, _eventURI);\\n\\t\\t_setEventRaised(_eventIds, \\\"0\\\");\\n\\t\\t_eventIds++;\\n\\n\\t\\treturn _eventIds;\\n\\t}\\n\\t\\n\\nfunction setGrantProject(\\t\\n\\t\\tuint256 GrantProjectId,\\n\\t\\tuint256 ProjectId,\\n\\t\\tuint256 GranttId\\n\\t) public virtual {\\n\\t\\tAllGrantProject[GrantProjectId] = [GranttId,ProjectId];\\n\\n\\t}\\n\\n\\nfunction CreateGrantProject(\\n\\t\\tuint256 ProjectId,\\n\\t\\tuint256 GranttId\\n\\t) public returns (uint256) {\\n\\t\\tsetGrantProject(_GrantProjectIds,ProjectId,GranttId);\\n\\t\\t_GrantProjectIds++;\\n\\t\\t\\n\\t\\treturn _GrantProjectIds;\\n\\t}\\n\\n\\n\\n\\nfunction createGrantEvent(string memory _eventURI)\\n\\t\\tpublic\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\t_setGrantEventURI(_GrantEventIds, _eventURI);\\n\\t\\t_GrantEventIds++;\\n\\n\\t\\treturn _GrantEventIds;\\n\\t}\\n\\n\\nfunction getSearchedProjectByGrantID(uint256 start, uint256 end, uint256 Grantid)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (uint256[] memory)\\n\\t{\\n\\t\\tuint256[] memory _SearchedProject = new uint256[](10);\\n\\n\\t\\tuint256 __ProjectSearchIds = 0;\\n\\t\\tif ((_GrantProjectIds - start) < 0)\\n\\t\\t{\\n\\t\\t\\treturn _SearchedProject;\\n\\t\\t}\\n\\t\\tif (_GrantProjectIds < end){\\n\\t\\t\\tend = _GrantProjectIds;\\n\\t\\t}\\n\\t\\t\\n\\t\\tfor (uint256 i = start; i < end; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tAllGrantProject[i][0] == Grantid\\n\\t\\t\\t) {\\n\\t\\t\\t\\t_SearchedProject[__ProjectSearchIds] = AllGrantProject[i][1];\\n\\t\\t\\t\\t__ProjectSearchIds++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn _SearchedProject;\\n\\t}\\n\\n\\n\\nfunction gettokenIdByUri(string memory _tokenURI)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tfor (uint256 i = 0; i < _tokenIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(_tokenURIs[i])) == keccak256(bytes(_tokenURI))\\n\\t\\t\\t) {\\n\\t\\t\\t\\treturn i;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn 0;\\n\\t}\\n\\nfunction getBidIdByUri(string memory _bidURI)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tfor (uint256 i = 0; i < _bidIds; i++) {\\n\\t\\t\\tif (keccak256(bytes(_bidURIs[i])) == keccak256(bytes(_bidURI))) {\\n\\t\\t\\t\\treturn i;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn 0;\\n\\t}\\n\\nfunction gettokenSearchEventTotal(uint256 EventID)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string[] memory)\\n\\t{\\n\\t\\tstring[] memory _SearchedStoreToken = new string[](10);\\n\\n\\t\\tuint256 _EventTokenSearchIds2 = 0;\\n\\n\\t\\tfor (uint256 i = 0; i < _EventTokenIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(AllEventTokens[i][0])) ==\\n\\t\\t\\t\\tkeccak256(bytes(Strings.toString(EventID)))\\n\\t\\t\\t) {\\n\\t\\t\\t\\t_SearchedStoreToken[_EventTokenSearchIds2] = AllEventTokens[i][\\n\\t\\t\\t\\t\\t1\\n\\t\\t\\t\\t];\\n\\t\\t\\t\\t_EventTokenSearchIds2++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn _SearchedStoreToken;\\n\\t}\\n\\nfunction getSearchEventbyWallet(string memory Wallet)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string[] memory)\\n\\t{\\n\\t\\n\\t\\tuint256 _TemporarySearch = 0;\\n\\t\\tuint256 _SearchIds = 0;\\n\\n\\t\\tfor (uint256 i = 0; i < _eventIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(_eventURIs[i][0])) ==\\n\\t\\t\\t\\tkeccak256(bytes(Wallet))\\n\\t\\t\\t) {\\n\\t\\t\\t\\t_TemporarySearch++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tstring[] memory _SearchedStoreEvents = new string[](_TemporarySearch);\\n\\t\\tfor (uint256 i = 0; i < _eventIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(_eventURIs[i][0])) ==\\n\\t\\t\\t\\tkeccak256(bytes(Wallet))\\n\\t\\t\\t) {\\n\\t\\t\\t\\t_SearchedStoreEvents[_SearchIds] = _eventURIs[i][1];\\n\\t\\t\\t\\t_SearchIds++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\n\\t\\treturn _SearchedStoreEvents;\\n\\t}\\n\\nfunction getGetEventsTokenID(uint256 EventId, string memory _tokenURI)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tfor (uint256 i = 0; i < _EventTokenIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(AllEventTokens[i][0])) ==\\n\\t\\t\\t\\tkeccak256(bytes(Strings.toString(EventId))) &&\\n\\t\\t\\t\\tkeccak256(bytes(AllEventTokens[i][1])) ==\\n\\t\\t\\t\\tkeccak256(bytes(_tokenURI))\\n\\t\\t\\t) {\\n\\t\\t\\t\\treturn i;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn 0;\\n\\t}\\n\\nfunction _getSearchedTokenURI(uint256 _tokenId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string memory)\\n\\t{\\n\\t\\treturn _SearchedStore[_tokenId][0];\\n\\t}\\n\\nfunction _setEventURI(uint256 eventId,  string memory _eventWallet ,string memory _eventURI)\\n\\t\\tpublic\\n\\t\\tvirtual\\n\\t{\\n\\t\\t_eventURIs[eventId] = [\\n\\t\\t\\t_eventWallet,\\n\\t\\t\\t_eventURI\\n\\t\\t];\\n\\t\\t_eventRaised[eventId] = \\\"0\\\";\\n\\t}\\n\\nfunction _setGrantEventURI(uint256 eventId, string memory _eventURI)\\n\\t\\tpublic\\n\\t\\tvirtual\\n\\t{\\n\\t\\t_GrantEventURIs[eventId] = _eventURI;\\n\\t}\\n\\n\\nfunction _setTokenURI(uint256 tokenId, string memory _tokenURI)\\n\\t\\tpublic\\n\\t\\tvirtual\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\t_exists(tokenId),\\n\\t\\t\\t\\\"ERC721Metadata: URI set of nonexistent token\\\"\\n\\t\\t);\\n\\t\\t_tokenURIs[tokenId] = _tokenURI;\\n\\t}\\n\\nfunction eventURI(uint256 eventId) public view returns (string[2] memory) {\\n\\t\\treturn _eventURIs[eventId];\\n\\t}\\n\\nfunction tokenURI(uint256 tokenId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (string memory)\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\t_exists(tokenId),\\n\\t\\t\\t\\\"ERC721Metadata: URI query for nonexistent token\\\"\\n\\t\\t);\\n\\n\\t\\treturn _tokenURIs[tokenId];\\n\\t}\\n\\nfunction totalSupply() public view returns (uint256) {\\n\\t\\treturn _tokenIds;\\n\\t}\\n\\nfunction totalEvent() public view returns (uint256) {\\n\\t\\treturn _eventIds;\\n\\t}\\n\\nfunction totalGrantEvent() public view returns (uint256) {\\n\\t\\treturn _GrantProjectIds;\\n\\t}\\n\\nfunction _setBidURI(uint256 bidId, string memory _bidURI) public virtual {\\n\\t\\t_bidURIs[bidId] = _bidURI;\\n\\t}\\n\\nfunction BidURI(uint256 BidId) public view returns (string memory) {\\n\\t\\treturn _bidURIs[BidId];\\n\\t}\\n\\nfunction getTotalBid(uint256 TokenID)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string[] memory)\\n\\t{\\n\\t\\tstring[] memory _SearchedStoreBid = new string[](10);\\n\\n\\t\\tuint256 _TokenBidSearchIds2 = 0;\\n\\n\\t\\tfor (uint256 i = 0; i < _TokenBidIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(AllTokensBids[i][0])) ==\\n\\t\\t\\t\\tkeccak256(bytes(Strings.toString(TokenID)))\\n\\t\\t\\t) {\\n\\t\\t\\t\\t_SearchedStoreBid[_TokenBidSearchIds2] = AllTokensBids[i][1];\\n\\t\\t\\t\\t_TokenBidSearchIds2++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn _SearchedStoreBid;\\n\\t}\\n\\nfunction getBidsSearchToken(uint256 TokenID)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string[] memory)\\n\\t{\\n\\t\\tstring[] memory _SearchedStoreBid = new string[](10);\\n\\n\\t\\tuint256 _TokenBidSearchIds2 = 0;\\n\\n\\t\\tfor (uint256 i = 0; i < _TokenBidIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(AllTokensBids[i][0])) ==\\n\\t\\t\\t\\tkeccak256(bytes(Strings.toString(TokenID)))\\n\\t\\t\\t) {\\n\\t\\t\\t\\t_SearchedStoreBid[_TokenBidSearchIds2] = AllTokensBids[i][1];\\n\\t\\t\\t\\t_TokenBidSearchIds2++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn _SearchedStoreBid;\\n\\t}\\n\\nfunction _setTokenBid(\\n\\t\\tuint256 TokenBidId,\\n\\t\\tuint256 TokenId,\\n\\t\\tstring memory _BidURI\\n\\t) public virtual {\\n\\t\\tAllTokensBids[TokenBidId] = [\\n\\t\\t\\tStrings.toString(TokenId),\\n\\t\\t\\tstring(_BidURI)\\n\\t\\t];\\n\\t}\\n \\nfunction getEventRaised(uint256 _eventId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string memory)\\n\\t{\\n\\t\\treturn _eventRaised[_eventId];\\n\\t}\\n\\nfunction _setEventRaised(uint256 _eventId, string memory _raised)\\n\\t\\tpublic\\n\\t{\\n\\t\\t_eventRaised[_eventId] = _raised;\\n\\t}\\n\\n \\nfunction createBid(\\n\\t\\tuint256 _tokenId,\\n\\t\\tstring memory _bidURI,\\n\\t\\tstring memory _updatedURI,\\n\\t\\tuint256 _eventid\\n\\t) public   {\\n\\t\\tuint256 _EventTokenId = getGetEventsTokenID(\\n\\t\\t\\t_eventid,\\n\\t\\t\\t_tokenURIs[_tokenId]\\n\\t\\t);\\n\\t\\t_tokenURIs[_tokenId] = _updatedURI;\\n\\t\\t_setTokenEvent(_EventTokenId, _eventid, _updatedURI);\\n\\n\\t\\t_setTokenBid(_TokenBidIds, _tokenId, _bidURI);\\n\\t\\t_TokenBidIds++;\\n\\t\\t_bidIds++;\\n\\t}\\n}\\n\",\"keccak256\":\"0xe75b60d00e6b8f929031a9d22b3775241692caf57da4b418c888c4f14a9d92dd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162004f3538038062004f358339818101604052810190620000379190620001a3565b818181600090805190602001906200005192919062000075565b5080600190805190602001906200006a92919062000075565b5050505050620003ac565b8280546200008390620002bd565b90600052602060002090601f016020900481019282620000a75760008555620000f3565b82601f10620000c257805160ff1916838001178555620000f3565b82800160010185558215620000f3579182015b82811115620000f2578251825591602001919060010190620000d5565b5b50905062000102919062000106565b5090565b5b808211156200012157600081600090555060010162000107565b5090565b60006200013c620001368462000251565b62000228565b9050828152602081018484840111156200015b576200015a6200038c565b5b6200016884828562000287565b509392505050565b600082601f83011262000188576200018762000387565b5b81516200019a84826020860162000125565b91505092915050565b60008060408385031215620001bd57620001bc62000396565b5b600083015167ffffffffffffffff811115620001de57620001dd62000391565b5b620001ec8582860162000170565b925050602083015167ffffffffffffffff81111562000210576200020f62000391565b5b6200021e8582860162000170565b9150509250929050565b60006200023462000247565b9050620002428282620002f3565b919050565b6000604051905090565b600067ffffffffffffffff8211156200026f576200026e62000358565b5b6200027a826200039b565b9050602081019050919050565b60005b83811015620002a75780820151818401526020810190506200028a565b83811115620002b7576000848401525b50505050565b60006002820490506001821680620002d657607f821691505b60208210811415620002ed57620002ec62000329565b5b50919050565b620002fe826200039b565b810181811067ffffffffffffffff8211171562000320576200031f62000358565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b614b7980620003bc6000396000f3fe608060405234801561001057600080fd5b50600436106102955760003560e01c806370a0823111610167578063b88d4fde116100ce578063e08033d311610087578063e08033d3146108dc578063e257a94c146108f8578063e985e9c514610928578063eb1d234d14610958578063f327579414610988578063f880eb19146109a457610295565b8063b88d4fde146107f6578063c87b56dd14610812578063cef80b3a14610842578063d45fc51614610860578063d654e99314610890578063dfc5e169146108ac57610295565b806395d89b411161012057806395d89b411461070e578063a0fd0c6a1461072c578063a22cb4651461075c578063a99bee2e14610778578063aed4796114610796578063b10a5dfa146107c657610295565b806370a08231146106145780637c073ec6146106445780637cedbc1e146106745780637eadfa6a146106a457806384eb8f68146106c2578063932a196b146106de57610295565b806328520ab71161020b5780634ef4e80f116101c45780634ef4e80f146105085780635154380a14610538578063523796271461056857806353c227cc1461059857806361958158146105c85780636352211e146105e457610295565b806328520ab71461041057806335011d90146104405780633592dd801461047057806342842e0e1461048c578063446a92e3146104a85780634eb083ec146104d857610295565b80630da3c49c1161025d5780630da3c49c14610350578063144cbca61461036c5780631677bf081461038a57806318160ddd146103a65780631e65e117146103c457806323b872dd146103f457610295565b8063015388681461029a57806301ffc9a7146102b657806306fdde03146102e6578063081812fc14610304578063095ea7b314610334575b600080fd5b6102b460048036038101906102af9190613740565b6109c2565b005b6102d060048036038101906102cb91906135f8565b610a36565b6040516102dd9190613f93565b60405180910390f35b6102ee610b18565b6040516102fb9190613fae565b60405180910390f35b61031e60048036038101906103199190613713565b610baa565b60405161032b9190613ec6565b60405180910390f35b61034e600480360381019061034991906135b8565b610c2f565b005b61036a60048036038101906103659190613827565b610d47565b005b610374610e67565b60405161038191906141b0565b60405180910390f35b6103a4600480360381019061039f9190613740565b610e6d565b005b6103ae610e99565b6040516103bb91906141b0565b60405180910390f35b6103de60048036038101906103d99190613652565b610ea3565b6040516103eb9190613f4f565b60405180910390f35b61040e60048036038101906104099190613433565b6110c7565b005b61042a60048036038101906104259190613740565b611127565b60405161043791906141b0565b60405180910390f35b61045a60048036038101906104559190613549565b611200565b60405161046791906141b0565b60405180910390f35b61048a60048036038101906104859190613906565b611263565b005b6104a660048036038101906104a19190613433565b6112a7565b005b6104c260048036038101906104bd9190613713565b6112c7565b6040516104cf9190613fae565b60405180910390f35b6104f260048036038101906104ed9190613713565b61136c565b6040516104ff9190613fae565b60405180910390f35b610522600480360381019061051d91906138c6565b611411565b60405161052f91906141b0565b60405180910390f35b610552600480360381019061054d9190613713565b611443565b60405161055f9190613f4f565b60405180910390f35b610582600480360381019061057d9190613652565b6115f3565b60405161058f91906141b0565b60405180910390f35b6105b260048036038101906105ad9190613713565b611623565b6040516105bf9190613fae565b60405180910390f35b6105e260048036038101906105dd919061379c565b6116c3565b005b6105fe60048036038101906105f99190613713565b61175c565b60405161060b9190613ec6565b60405180910390f35b61062e600480360381019061062991906133c6565b61180e565b60405161063b91906141b0565b60405180910390f35b61065e60048036038101906106599190613975565b6118c6565b60405161066b9190613f71565b60405180910390f35b61068e60048036038101906106899190613713565b6119fb565b60405161069b9190613fae565b60405180910390f35b6106ac611ab4565b6040516106b991906141b0565b60405180910390f35b6106dc60048036038101906106d79190613740565b611abe565b005b6106f860048036038101906106f39190613652565b611aea565b60405161070591906141b0565b60405180910390f35b610716611b59565b6040516107239190613fae565b60405180910390f35b61074660048036038101906107419190613713565b611beb565b6040516107539190613f2d565b60405180910390f35b61077660048036038101906107719190613509565b611ccb565b005b610780611ce1565b60405161078d91906141b0565b60405180910390f35b6107b060048036038101906107ab9190613713565b611ce7565b6040516107bd9190613f4f565b60405180910390f35b6107e060048036038101906107db91906138c6565b611e97565b6040516107ed9190613fae565b60405180910390f35b610810600480360381019061080b9190613486565b611f47565b005b61082c60048036038101906108279190613713565b611fa9565b6040516108399190613fae565b60405180910390f35b61084a612096565b60405161085791906141b0565b60405180910390f35b61087a60048036038101906108759190613652565b61209c565b60405161088791906141b0565b60405180910390f35b6108aa60048036038101906108a59190613906565b61210b565b005b6108c660048036038101906108c19190613713565b61214f565b6040516108d39190613fae565b60405180910390f35b6108f660048036038101906108f19190613740565b6121ef565b005b610912600480360381019061090d919061369b565b61221b565b60405161091f91906141b0565b60405180910390f35b610942600480360381019061093d91906133f3565b61228e565b60405161094f9190613f93565b60405180910390f35b610972600480360381019061096d9190613713565b612322565b60405161097f9190613f4f565b60405180910390f35b6109a2600480360381019061099d9190613975565b6124d2565b005b6109ac61250e565b6040516109b991906141b0565b60405180910390f35b6109cb82612518565b610a0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0190614130565b60405180910390fd5b80601360008481526020019081526020016000209080519060200190610a319291906130bc565b505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610b0157507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610b115750610b1082612584565b5b9050919050565b606060008054610b27906144cb565b80601f0160208091040260200160405190810160405280929190818152602001828054610b53906144cb565b8015610ba05780601f10610b7557610100808354040283529160200191610ba0565b820191906000526020600020905b815481529060010190602001808311610b8357829003601f168201915b5050505050905090565b6000610bb582612518565b610bf4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610beb90614110565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610c3a8261175c565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610cab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca290614170565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610cca6125ee565b73ffffffffffffffffffffffffffffffffffffffff161480610cf95750610cf881610cf36125ee565b61228e565b5b610d38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2f90614090565b60405180910390fd5b610d4283836125f6565b505050565b6000610dee82601360008881526020019081526020016000208054610d6b906144cb565b80601f0160208091040260200160405190810160405280929190818152602001828054610d97906144cb565b8015610de45780601f10610db957610100808354040283529160200191610de4565b820191906000526020600020905b815481529060010190602001808311610dc757829003601f168201915b5050505050611127565b905082601360008781526020019081526020016000209080519060200190610e179291906130bc565b50610e23818385611263565b610e30600c54868661210b565b600c6000815480929190610e439061452e565b919050555060076000815480929190610e5b9061452e565b91905055505050505050565b600d5481565b80601760008481526020019081526020016000209080519060200190610e949291906130bc565b505050565b6000600654905090565b606060008060005b600854811015610f2157848051906020012060146000838152602001908152602001600020600060028110610ee357610ee2614635565b5b01604051610ef19190613eaf565b60405180910390201415610f0e578280610f0a9061452e565b9350505b8080610f199061452e565b915050610eab565b5060008267ffffffffffffffff811115610f3e57610f3d614664565b5b604051908082528060200260200182016040528015610f7157816020015b6060815260200190600190039081610f5c5790505b50905060005b6008548110156110bb57858051906020012060146000838152602001908152602001600020600060028110610faf57610fae614635565b5b01604051610fbd9190613eaf565b604051809103902014156110a85760146000828152602001908152602001600020600160028110610ff157610ff0614635565b5b018054610ffd906144cb565b80601f0160208091040260200160405190810160405280929190818152602001828054611029906144cb565b80156110765780601f1061104b57610100808354040283529160200191611076565b820191906000526020600020905b81548152906001019060200180831161105957829003601f168201915b505050505082848151811061108e5761108d614635565b5b602002602001018190525082806110a49061452e565b9350505b80806110b39061452e565b915050610f77565b50809350505050919050565b6110d86110d26125ee565b826126af565b611117576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110e90614190565b60405180910390fd5b61112283838361278d565b505050565b600080600090505b600b548110156111f457611142846129f4565b80519060200120600e600083815260200190815260200160002060006002811061116f5761116e614635565b5b0160405161117d9190613eaf565b60405180910390201480156111d357508280519060200120600e60008381526020019081526020016000206001600281106111bb576111ba614635565b5b016040516111c99190613eaf565b6040518091039020145b156111e157809150506111fa565b80806111ec9061452e565b91505061112f565b50600090505b92915050565b600061120e84600654612b55565b61121a600654846109c2565b611227600b548385611263565b6006600081548092919061123a9061452e565b9190505550600b60008154809291906112529061452e565b919050555060065490509392505050565b6040518060400160405280611277846129f4565b815260200182815250600e60008581526020019081526020016000209060026112a1929190613142565b50505050565b6112c283838360405180602001604052806000815250611f47565b505050565b60606012600083815260200190815260200160002080546112e7906144cb565b80601f0160208091040260200160405190810160405280929190818152602001828054611313906144cb565b80156113605780601f1061133557610100808354040283529160200191611360565b820191906000526020600020905b81548152906001019060200180831161134357829003601f168201915b50505050509050919050565b606060176000838152602001908152602001600020805461138c906144cb565b80601f01602080910402602001604051908101604052809291908181526020018280546113b8906144cb565b80156114055780601f106113da57610100808354040283529160200191611405565b820191906000526020600020905b8154815290600101906020018083116113e857829003601f168201915b50505050509050919050565b6000611420600a5484846124d2565b600a60008154809291906114339061452e565b9190505550600a54905092915050565b60606000600a67ffffffffffffffff81111561146257611461614664565b5b60405190808252806020026020018201604052801561149557816020015b60608152602001906001900390816114805790505b5090506000805b600c548110156115e8576114af856129f4565b80519060200120601060008381526020019081526020016000206000600281106114dc576114db614635565b5b016040516114ea9190613eaf565b604051809103902014156115d5576010600082815260200190815260200160002060016002811061151e5761151d614635565b5b01805461152a906144cb565b80601f0160208091040260200160405190810160405280929190818152602001828054611556906144cb565b80156115a35780601f10611578576101008083540402835291602001916115a3565b820191906000526020600020905b81548152906001019060200180831161158657829003601f168201915b50505050508383815181106115bb576115ba614635565b5b602002602001018190525081806115d19061452e565b9250505b80806115e09061452e565b91505061149c565b508192505050919050565b600061160160095483611abe565b600960008154809291906116149061452e565b91905055506009549050919050565b60166020528060005260406000206000915090508054611642906144cb565b80601f016020809104026020016040519081016040528092919081815260200182805461166e906144cb565b80156116bb5780601f10611690576101008083540402835291602001916116bb565b820191906000526020600020905b81548152906001019060200180831161169e57829003601f168201915b505050505081565b604051806040016040528083815260200182815250601460008581526020019081526020016000209060026116f9929190613142565b506040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152506017600085815260200190815260200160002090805190602001906117569291906130bc565b50505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611805576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117fc906140d0565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561187f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611876906140b0565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606000600a67ffffffffffffffff8111156118e5576118e4614664565b5b6040519080825280602002602001820160405280156119135781602001602082028036833780820191505090505b50905060008086600a5461192791906143e1565b10156119375781925050506119f4565b84600a54101561194757600a5494505b60008690505b858110156119ed5784600f600083815260200190815260200160002060006002811061197c5761197b614635565b5b015414156119da57600f60008281526020019081526020016000206001600281106119aa576119a9614635565b5b01548383815181106119bf576119be614635565b5b60200260200101818152505081806119d69061452e565b9250505b80806119e59061452e565b91505061194d565b5081925050505b9392505050565b606060116000838152602001908152602001600020600060028110611a2357611a22614635565b5b018054611a2f906144cb565b80601f0160208091040260200160405190810160405280929190818152602001828054611a5b906144cb565b8015611aa85780601f10611a7d57610100808354040283529160200191611aa8565b820191906000526020600020905b815481529060010190602001808311611a8b57829003601f168201915b50505050509050919050565b6000600854905090565b80601560008481526020019081526020016000209080519060200190611ae59291906130bc565b505050565b600080600090505b600654811015611b4e57828051906020012060136000838152602001908152602001600020604051611b249190613eaf565b60405180910390201415611b3b5780915050611b54565b8080611b469061452e565b915050611af2565b50600090505b919050565b606060018054611b68906144cb565b80601f0160208091040260200160405190810160405280929190818152602001828054611b94906144cb565b8015611be15780601f10611bb657610100808354040283529160200191611be1565b820191906000526020600020905b815481529060010190602001808311611bc457829003601f168201915b5050505050905090565b611bf3613195565b60146000838152602001908152602001600020600280602002604051908101604052809291906000905b82821015611cc0578382018054611c33906144cb565b80601f0160208091040260200160405190810160405280929190818152602001828054611c5f906144cb565b8015611cac5780601f10611c8157610100808354040283529160200191611cac565b820191906000526020600020905b815481529060010190602001808311611c8f57829003601f168201915b505050505081526020019060010190611c1d565b505050509050919050565b611cdd611cd66125ee565b8383612d2f565b5050565b60095481565b60606000600a67ffffffffffffffff811115611d0657611d05614664565b5b604051908082528060200260200182016040528015611d3957816020015b6060815260200190600190039081611d245790505b5090506000805b600c54811015611e8c57611d53856129f4565b8051906020012060106000838152602001908152602001600020600060028110611d8057611d7f614635565b5b01604051611d8e9190613eaf565b60405180910390201415611e795760106000828152602001908152602001600020600160028110611dc257611dc1614635565b5b018054611dce906144cb565b80601f0160208091040260200160405190810160405280929190818152602001828054611dfa906144cb565b8015611e475780601f10611e1c57610100808354040283529160200191611e47565b820191906000526020600020905b815481529060010190602001808311611e2a57829003601f168201915b5050505050838381518110611e5f57611e5e614635565b5b60200260200101819052508180611e759061452e565b9250505b8080611e849061452e565b915050611d40565b508192505050919050565b60116020528160005260406000208160028110611eb357600080fd5b01600091509150508054611ec6906144cb565b80601f0160208091040260200160405190810160405280929190818152602001828054611ef2906144cb565b8015611f3f5780601f10611f1457610100808354040283529160200191611f3f565b820191906000526020600020905b815481529060010190602001808311611f2257829003601f168201915b505050505081565b611f58611f526125ee565b836126af565b611f97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f8e90614190565b60405180910390fd5b611fa384848484612e9c565b50505050565b6060611fb482612518565b611ff3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fea90614150565b60405180910390fd5b601360008381526020019081526020016000208054612011906144cb565b80601f016020809104026020016040519081016040528092919081815260200182805461203d906144cb565b801561208a5780601f1061205f5761010080835404028352916020019161208a565b820191906000526020600020905b81548152906001019060200180831161206d57829003601f168201915b50505050509050919050565b600a5481565b600080600090505b600754811015612100578280519060200120601260008381526020019081526020016000206040516120d69190613eaf565b604051809103902014156120ed5780915050612106565b80806120f89061452e565b9150506120a4565b50600090505b919050565b604051806040016040528061211f846129f4565b81526020018281525060106000858152602001908152602001600020906002612149929190613142565b50505050565b6015602052806000526040600020600091509050805461216e906144cb565b80601f016020809104026020016040519081016040528092919081815260200182805461219a906144cb565b80156121e75780601f106121bc576101008083540402835291602001916121e7565b820191906000526020600020905b8154815290600101906020018083116121ca57829003601f168201915b505050505081565b806012600084815260200190815260200160002090805190602001906122169291906130bc565b505050565b600061222a60085484846116c3565b61226b6008546040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250610e6d565b6008600081548092919061227e9061452e565b9190505550600854905092915050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60606000600a67ffffffffffffffff81111561234157612340614664565b5b60405190808252806020026020018201604052801561237457816020015b606081526020019060019003908161235f5790505b5090506000805b600b548110156124c75761238e856129f4565b80519060200120600e60008381526020019081526020016000206000600281106123bb576123ba614635565b5b016040516123c99190613eaf565b604051809103902014156124b457600e60008281526020019081526020016000206001600281106123fd576123fc614635565b5b018054612409906144cb565b80601f0160208091040260200160405190810160405280929190818152602001828054612435906144cb565b80156124825780601f1061245757610100808354040283529160200191612482565b820191906000526020600020905b81548152906001019060200180831161246557829003601f168201915b505050505083838151811061249a57612499614635565b5b602002602001018190525081806124b09061452e565b9250505b80806124bf9061452e565b91505061237b565b508192505050919050565b604051806040016040528082815260200183815250600f60008581526020019081526020016000209060026125089291906131bc565b50505050565b6000600a54905090565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166126698361175c565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006126ba82612518565b6126f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126f090614070565b60405180910390fd5b60006127048361175c565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806127465750612745818561228e565b5b8061278457508373ffffffffffffffffffffffffffffffffffffffff1661276c84610baa565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166127ad8261175c565b73ffffffffffffffffffffffffffffffffffffffff1614612803576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127fa90613ff0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612873576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161286a90614030565b60405180910390fd5b61287e838383612ef8565b6128896000826125f6565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546128d991906143e1565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612930919061435a565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46129ef838383612efd565b505050565b60606000821415612a3c576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612b50565b600082905060005b60008214612a6e578080612a579061452e565b915050600a82612a6791906143b0565b9150612a44565b60008167ffffffffffffffff811115612a8a57612a89614664565b5b6040519080825280601f01601f191660200182016040528015612abc5781602001600182028036833780820191505090505b5090505b60008514612b4957600182612ad591906143e1565b9150600a85612ae49190614577565b6030612af0919061435a565b60f81b818381518110612b0657612b05614635565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85612b4291906143b0565b9450612ac0565b8093505050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612bc5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bbc906140f0565b60405180910390fd5b612bce81612518565b15612c0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c0590614010565b60405180910390fd5b612c1a60008383612ef8565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612c6a919061435a565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612d2b60008383612efd565b5050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612d9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d9590614050565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051612e8f9190613f93565b60405180910390a3505050565b612ea784848461278d565b612eb384848484612f02565b612ef2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ee990613fd0565b60405180910390fd5b50505050565b505050565b505050565b6000612f238473ffffffffffffffffffffffffffffffffffffffff16613099565b1561308c578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612f4c6125ee565b8786866040518563ffffffff1660e01b8152600401612f6e9493929190613ee1565b602060405180830381600087803b158015612f8857600080fd5b505af1925050508015612fb957506040513d601f19601f82011682018060405250810190612fb69190613625565b60015b61303c573d8060008114612fe9576040519150601f19603f3d011682016040523d82523d6000602084013e612fee565b606091505b50600081511415613034576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161302b90613fd0565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050613091565b600190505b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b8280546130c8906144cb565b90600052602060002090601f0160209004810192826130ea5760008555613131565b82601f1061310357805160ff1916838001178555613131565b82800160010185558215613131579182015b82811115613130578251825591602001919060010190613115565b5b50905061313e91906131fc565b5090565b8260028101928215613184579160200282015b828111156131835782518290805190602001906131739291906130bc565b5091602001919060010190613155565b5b5090506131919190613219565b5090565b60405180604001604052806002905b60608152602001906001900390816131a45790505090565b82600281019282156131eb579160200282015b828111156131ea5782518255916020019190600101906131cf565b5b5090506131f891906131fc565b5090565b5b808211156132155760008160009055506001016131fd565b5090565b5b808211156132395760008181613230919061323d565b5060010161321a565b5090565b508054613249906144cb565b6000825580601f1061325b575061327a565b601f01602090049060005260206000209081019061327991906131fc565b5b50565b600061329061328b846141f0565b6141cb565b9050828152602081018484840111156132ac576132ab614698565b5b6132b7848285614489565b509392505050565b60006132d26132cd84614221565b6141cb565b9050828152602081018484840111156132ee576132ed614698565b5b6132f9848285614489565b509392505050565b60008135905061331081614ae7565b92915050565b60008135905061332581614afe565b92915050565b60008135905061333a81614b15565b92915050565b60008151905061334f81614b15565b92915050565b600082601f83011261336a57613369614693565b5b813561337a84826020860161327d565b91505092915050565b600082601f83011261339857613397614693565b5b81356133a88482602086016132bf565b91505092915050565b6000813590506133c081614b2c565b92915050565b6000602082840312156133dc576133db6146a2565b5b60006133ea84828501613301565b91505092915050565b6000806040838503121561340a576134096146a2565b5b600061341885828601613301565b925050602061342985828601613301565b9150509250929050565b60008060006060848603121561344c5761344b6146a2565b5b600061345a86828701613301565b935050602061346b86828701613301565b925050604061347c868287016133b1565b9150509250925092565b600080600080608085870312156134a05761349f6146a2565b5b60006134ae87828801613301565b94505060206134bf87828801613301565b93505060406134d0878288016133b1565b925050606085013567ffffffffffffffff8111156134f1576134f061469d565b5b6134fd87828801613355565b91505092959194509250565b600080604083850312156135205761351f6146a2565b5b600061352e85828601613301565b925050602061353f85828601613316565b9150509250929050565b600080600060608486031215613562576135616146a2565b5b600061357086828701613301565b935050602084013567ffffffffffffffff8111156135915761359061469d565b5b61359d86828701613383565b92505060406135ae868287016133b1565b9150509250925092565b600080604083850312156135cf576135ce6146a2565b5b60006135dd85828601613301565b92505060206135ee858286016133b1565b9150509250929050565b60006020828403121561360e5761360d6146a2565b5b600061361c8482850161332b565b91505092915050565b60006020828403121561363b5761363a6146a2565b5b600061364984828501613340565b91505092915050565b600060208284031215613668576136676146a2565b5b600082013567ffffffffffffffff8111156136865761368561469d565b5b61369284828501613383565b91505092915050565b600080604083850312156136b2576136b16146a2565b5b600083013567ffffffffffffffff8111156136d0576136cf61469d565b5b6136dc85828601613383565b925050602083013567ffffffffffffffff8111156136fd576136fc61469d565b5b61370985828601613383565b9150509250929050565b600060208284031215613729576137286146a2565b5b6000613737848285016133b1565b91505092915050565b60008060408385031215613757576137566146a2565b5b6000613765858286016133b1565b925050602083013567ffffffffffffffff8111156137865761378561469d565b5b61379285828601613383565b9150509250929050565b6000806000606084860312156137b5576137b46146a2565b5b60006137c3868287016133b1565b935050602084013567ffffffffffffffff8111156137e4576137e361469d565b5b6137f086828701613383565b925050604084013567ffffffffffffffff8111156138115761381061469d565b5b61381d86828701613383565b9150509250925092565b60008060008060808587031215613841576138406146a2565b5b600061384f878288016133b1565b945050602085013567ffffffffffffffff8111156138705761386f61469d565b5b61387c87828801613383565b935050604085013567ffffffffffffffff81111561389d5761389c61469d565b5b6138a987828801613383565b92505060606138ba878288016133b1565b91505092959194509250565b600080604083850312156138dd576138dc6146a2565b5b60006138eb858286016133b1565b92505060206138fc858286016133b1565b9150509250929050565b60008060006060848603121561391f5761391e6146a2565b5b600061392d868287016133b1565b935050602061393e868287016133b1565b925050604084013567ffffffffffffffff81111561395f5761395e61469d565b5b61396b86828701613383565b9150509250925092565b60008060006060848603121561398e5761398d6146a2565b5b600061399c868287016133b1565b93505060206139ad868287016133b1565b92505060406139be868287016133b1565b9150509250925092565b60006139d48383613c12565b905092915050565b60006139e88383613e91565b60208301905092915050565b6139fd81614415565b82525050565b6000613a0e82614291565b613a1881856142ef565b935083602082028501613a2a85614252565b8060005b85811015613a665784840389528151613a4785826139c8565b9450613a52836142c8565b925060208a01995050600181019050613a2e565b50829750879550505050505092915050565b6000613a838261429c565b613a8d81856142fa565b935083602082028501613a9f8561425c565b8060005b85811015613adb5784840389528151613abc85826139c8565b9450613ac7836142d5565b925060208a01995050600181019050613aa3565b50829750879550505050505092915050565b6000613af8826142a7565b613b02818561430b565b9350613b0d8361426c565b8060005b83811015613b3e578151613b2588826139dc565b9750613b30836142e2565b925050600181019050613b11565b5085935050505092915050565b613b5481614427565b82525050565b6000613b65826142b2565b613b6f818561431c565b9350613b7f818560208601614498565b613b88816146a7565b840191505092915050565b60008154613ba0816144cb565b613baa818661432d565b94506001821660008114613bc55760018114613bd657613c09565b60ff19831686528186019350613c09565b613bdf8561427c565b60005b83811015613c0157815481890152600182019150602081019050613be2565b838801955050505b50505092915050565b6000613c1d826142bd565b613c278185614338565b9350613c37818560208601614498565b613c40816146a7565b840191505092915050565b6000613c56826142bd565b613c608185614349565b9350613c70818560208601614498565b613c79816146a7565b840191505092915050565b6000613c91603283614349565b9150613c9c826146b8565b604082019050919050565b6000613cb4602583614349565b9150613cbf82614707565b604082019050919050565b6000613cd7601c83614349565b9150613ce282614756565b602082019050919050565b6000613cfa602483614349565b9150613d058261477f565b604082019050919050565b6000613d1d601983614349565b9150613d28826147ce565b602082019050919050565b6000613d40602c83614349565b9150613d4b826147f7565b604082019050919050565b6000613d63603883614349565b9150613d6e82614846565b604082019050919050565b6000613d86602a83614349565b9150613d9182614895565b604082019050919050565b6000613da9602983614349565b9150613db4826148e4565b604082019050919050565b6000613dcc602083614349565b9150613dd782614933565b602082019050919050565b6000613def602c83614349565b9150613dfa8261495c565b604082019050919050565b6000613e12602c83614349565b9150613e1d826149ab565b604082019050919050565b6000613e35602f83614349565b9150613e40826149fa565b604082019050919050565b6000613e58602183614349565b9150613e6382614a49565b604082019050919050565b6000613e7b603183614349565b9150613e8682614a98565b604082019050919050565b613e9a8161447f565b82525050565b613ea98161447f565b82525050565b6000613ebb8284613b93565b915081905092915050565b6000602082019050613edb60008301846139f4565b92915050565b6000608082019050613ef660008301876139f4565b613f0360208301866139f4565b613f106040830185613ea0565b8181036060830152613f228184613b5a565b905095945050505050565b60006020820190508181036000830152613f478184613a03565b905092915050565b60006020820190508181036000830152613f698184613a78565b905092915050565b60006020820190508181036000830152613f8b8184613aed565b905092915050565b6000602082019050613fa86000830184613b4b565b92915050565b60006020820190508181036000830152613fc88184613c4b565b905092915050565b60006020820190508181036000830152613fe981613c84565b9050919050565b6000602082019050818103600083015261400981613ca7565b9050919050565b6000602082019050818103600083015261402981613cca565b9050919050565b6000602082019050818103600083015261404981613ced565b9050919050565b6000602082019050818103600083015261406981613d10565b9050919050565b6000602082019050818103600083015261408981613d33565b9050919050565b600060208201905081810360008301526140a981613d56565b9050919050565b600060208201905081810360008301526140c981613d79565b9050919050565b600060208201905081810360008301526140e981613d9c565b9050919050565b6000602082019050818103600083015261410981613dbf565b9050919050565b6000602082019050818103600083015261412981613de2565b9050919050565b6000602082019050818103600083015261414981613e05565b9050919050565b6000602082019050818103600083015261416981613e28565b9050919050565b6000602082019050818103600083015261418981613e4b565b9050919050565b600060208201905081810360008301526141a981613e6e565b9050919050565b60006020820190506141c56000830184613ea0565b92915050565b60006141d56141e6565b90506141e182826144fd565b919050565b6000604051905090565b600067ffffffffffffffff82111561420b5761420a614664565b5b614214826146a7565b9050602081019050919050565b600067ffffffffffffffff82111561423c5761423b614664565b5b614245826146a7565b9050602081019050919050565b6000819050919050565b6000819050602082019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600060029050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60006143658261447f565b91506143708361447f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156143a5576143a46145a8565b5b828201905092915050565b60006143bb8261447f565b91506143c68361447f565b9250826143d6576143d56145d7565b5b828204905092915050565b60006143ec8261447f565b91506143f78361447f565b92508282101561440a576144096145a8565b5b828203905092915050565b60006144208261445f565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156144b657808201518184015260208101905061449b565b838111156144c5576000848401525b50505050565b600060028204905060018216806144e357607f821691505b602082108114156144f7576144f6614606565b5b50919050565b614506826146a7565b810181811067ffffffffffffffff8211171561452557614524614664565b5b80604052505050565b60006145398261447f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561456c5761456b6145a8565b5b600182019050919050565b60006145828261447f565b915061458d8361447f565b92508261459d5761459c6145d7565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920736574206f66206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b614af081614415565b8114614afb57600080fd5b50565b614b0781614427565b8114614b1257600080fd5b50565b614b1e81614433565b8114614b2957600080fd5b50565b614b358161447f565b8114614b4057600080fd5b5056fea2646970667358221220eed1c006c510983c07c5ffeb6a04053f5991b51b95fe479888f517a70f21a38564736f6c63430008060033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 27,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 31,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 35,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 39,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 45,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1590,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1592,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_bidIds",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1594,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_eventIds",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1596,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_GrantEventIds",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1598,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_GrantProjectIds",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1600,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_EventTokenIds",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 1602,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_TokenBidIds",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 1604,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_EventTokenSearchIds",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 1610,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "AllEventTokens",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_array(t_string_storage)2_storage)"
      },
      {
        "astId": 1616,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "AllGrantProject",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_array(t_uint256)2_storage)"
      },
      {
        "astId": 1622,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "AllTokensBids",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_array(t_string_storage)2_storage)"
      },
      {
        "astId": 1628,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_SearchedStore",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_array(t_string_storage)2_storage)"
      },
      {
        "astId": 1632,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_bidURIs",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1636,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1642,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_eventURIs",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_uint256,t_array(t_string_storage)2_storage)"
      },
      {
        "astId": 1646,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_GrantEventURIs",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1650,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_JudgerURIs",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1654,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_eventRaised",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1658,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_eventTokens",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_string_memory_ptr,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)2_storage": {
        "base": "t_string_storage",
        "encoding": "inplace",
        "label": "string[2]",
        "numberOfBytes": "64"
      },
      "t_array(t_uint256)2_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[2]",
        "numberOfBytes": "64"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_string_storage)2_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string[2])",
        "numberOfBytes": "32",
        "value": "t_array(t_string_storage)2_storage"
      },
      "t_mapping(t_uint256,t_array(t_uint256)2_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[2])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)2_storage"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}