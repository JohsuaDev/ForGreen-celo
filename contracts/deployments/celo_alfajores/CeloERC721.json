{
  "address": "0x12bf5915eF674A5351ccA7c5805E968090C7D053",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "BidId",
          "type": "uint256"
        }
      ],
      "name": "BidURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ProjectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "GranttId",
          "type": "uint256"
        }
      ],
      "name": "CreateGrantProject",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_EventTokenSearchIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_GrantEventIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_GrantEventURIs",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_GrantProjectIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_GrantVoteIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_JudgerURIs",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_SearchedStore",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "_getSearchedTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bidId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_bidURI",
          "type": "string"
        }
      ],
      "name": "_setBidURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_raised",
          "type": "string"
        }
      ],
      "name": "_setEventRaised",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_eventWallet",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_eventURI",
          "type": "string"
        }
      ],
      "name": "_setEventURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_eventURI",
          "type": "string"
        }
      ],
      "name": "_setGrantEventURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "TokenBidId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "TokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_BidURI",
          "type": "string"
        }
      ],
      "name": "_setTokenBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "EventTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "EventId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "_setTokenEvent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "_setTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_eventid",
          "type": "uint256"
        }
      ],
      "name": "claimToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_bidURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_updatedURI",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_eventid",
          "type": "uint256"
        }
      ],
      "name": "createBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_eventWallet",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_eventURI",
          "type": "string"
        }
      ],
      "name": "createEvent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_eventURI",
          "type": "string"
        }
      ],
      "name": "createGrantEvent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "Wallet",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "ProjectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "GranttId",
          "type": "uint256"
        }
      ],
      "name": "createGrantVote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "eventURI",
      "outputs": [
        {
          "internalType": "string[2]",
          "name": "",
          "type": "string[2]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_bidURI",
          "type": "string"
        }
      ],
      "name": "getBidIdByUri",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "TokenID",
          "type": "uint256"
        }
      ],
      "name": "getBidsSearchToken",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        }
      ],
      "name": "getEventRaised",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "EventId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "getGetEventsTokenID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "Wallet",
          "type": "string"
        }
      ],
      "name": "getSearchEventbyWallet",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "Grantid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ProjectId",
          "type": "uint256"
        }
      ],
      "name": "getSearchedGrantVoteProject",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "Grantid",
          "type": "uint256"
        }
      ],
      "name": "getSearchedProjectByGrantID",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "TokenID",
          "type": "uint256"
        }
      ],
      "name": "getTotalBid",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "gettokenIdByUri",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "EventID",
          "type": "uint256"
        }
      ],
      "name": "gettokenSearchEventTotal",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "GrantProjectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ProjectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "GranttId",
          "type": "uint256"
        }
      ],
      "name": "setGrantProject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "GrantVoteId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "Wallet",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "ProjectId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "GranttId",
          "type": "string"
        }
      ],
      "name": "setGrantVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalEvent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalGrantEvent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2a98453328eceb8df097ec2b5fb8d65f87e3be13669244b3c169049b7018dee9",
  "receipt": {
    "to": null,
    "from": "0x43F44Fa7842dED402Fd098e80a04D8BFc5997Ea1",
    "contractAddress": "0x12bf5915eF674A5351ccA7c5805E968090C7D053",
    "transactionIndex": 0,
    "gasUsed": "4604764",
    "logsBloom": "0x
    "blockHash": "0xa0e1430af7c9b379c713b6ecd5c7e5ab55bc91b332daa2fae922d15a33b97455",
    "transactionHash": "0x2a98453328eceb8df097ec2b5fb8d65f87e3be13669244b3c169049b7018dee9",
    "logs": [],
    "blockNumber": 12145930,
    "cumulativeGasUsed": "4604764",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "CUSD",
    "cUSD"
  ],
  "numDeployments": 15,
  "solcInputHash": "edb84c6bfbafb2774deee8aea1f87bed",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"BidId\",\"type\":\"uint256\"}],\"name\":\"BidURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ProjectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"GranttId\",\"type\":\"uint256\"}],\"name\":\"CreateGrantProject\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_EventTokenSearchIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_GrantEventIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_GrantEventURIs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_GrantProjectIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_GrantVoteIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_JudgerURIs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_SearchedStore\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"_getSearchedTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_bidURI\",\"type\":\"string\"}],\"name\":\"_setBidURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_raised\",\"type\":\"string\"}],\"name\":\"_setEventRaised\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_eventWallet\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_eventURI\",\"type\":\"string\"}],\"name\":\"_setEventURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_eventURI\",\"type\":\"string\"}],\"name\":\"_setGrantEventURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"TokenBidId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_BidURI\",\"type\":\"string\"}],\"name\":\"_setTokenBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"EventTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"EventId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"_setTokenEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"_setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_eventid\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_bidURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_updatedURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_eventid\",\"type\":\"uint256\"}],\"name\":\"createBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_eventWallet\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_eventURI\",\"type\":\"string\"}],\"name\":\"createEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_eventURI\",\"type\":\"string\"}],\"name\":\"createGrantEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"Wallet\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"ProjectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"GranttId\",\"type\":\"uint256\"}],\"name\":\"createGrantVote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"eventURI\",\"outputs\":[{\"internalType\":\"string[2]\",\"name\":\"\",\"type\":\"string[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_bidURI\",\"type\":\"string\"}],\"name\":\"getBidIdByUri\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"TokenID\",\"type\":\"uint256\"}],\"name\":\"getBidsSearchToken\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"getEventRaised\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"EventId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"getGetEventsTokenID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"Wallet\",\"type\":\"string\"}],\"name\":\"getSearchEventbyWallet\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Grantid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ProjectId\",\"type\":\"uint256\"}],\"name\":\"getSearchedGrantVoteProject\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Grantid\",\"type\":\"uint256\"}],\"name\":\"getSearchedProjectByGrantID\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"TokenID\",\"type\":\"uint256\"}],\"name\":\"getTotalBid\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"gettokenIdByUri\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"EventID\",\"type\":\"uint256\"}],\"name\":\"gettokenSearchEventTotal\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"GrantProjectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ProjectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"GranttId\",\"type\":\"uint256\"}],\"name\":\"setGrantProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"GrantVoteId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"Wallet\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ProjectId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"GranttId\",\"type\":\"string\"}],\"name\":\"setGrantVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalGrantEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CeloERC721.sol\":\"CeloERC721\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x921f012325281f7d81e29c53a13824cf6c2c5d77232065d0d4f3f912e97af6ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/CeloERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ncontract CeloERC721 is ERC721 {\\n\\tuint256 private _tokenIds;\\n\\tuint256 private _bidIds;\\n\\tuint256 private _eventIds;\\n    uint256 public _GrantEventIds;\\n\\tuint256 public _GrantProjectIds;\\n\\tuint256 public _GrantVoteIds;\\n\\tuint256 private _EventTokenIds;\\n\\tuint256 private _TokenBidIds;\\n\\tuint256 public _EventTokenSearchIds;\\n\\tmapping(uint256 => string[2]) private AllEventTokens;\\n\\tmapping(uint256 => string[3]) private AllGrantVotes;\\n    mapping(uint256 => uint256[2]) private AllGrantProject;\\n\\tmapping(uint256 => string[2]) private AllTokensBids;\\n\\tmapping(uint256 => string[2]) public _SearchedStore;\\n\\tmapping(uint256 => string) private _bidURIs;\\n\\tmapping(uint256 => string) private _tokenURIs;\\n\\tmapping(uint256 => string[2]) private _eventURIs;\\n\\tmapping(uint256 => string) public _GrantEventURIs;\\n    mapping(uint256 => string) public  _JudgerURIs;\\n\\tmapping(uint256 => string) private _eventRaised;\\n\\tmapping(string => string) private _eventTokens;\\n\\n\\tconstructor(string memory name, string memory symbol)\\n\\t\\tERC721(name, symbol)\\n\\t{}\\n\\nfunction claimToken(\\n\\t\\taddress _claimer,\\n\\t\\tstring memory _tokenURI,\\n\\t\\tuint256 _eventid\\n\\t) public returns (uint256) {\\n\\t\\t_mint(_claimer, _tokenIds);\\n\\t\\t_setTokenURI(_tokenIds, _tokenURI);\\n\\t\\t_setTokenEvent(_EventTokenIds, _eventid, _tokenURI);\\n\\t\\t_tokenIds++;\\n\\t\\t_EventTokenIds++;\\n\\t\\treturn _tokenIds;\\n\\t}\\n\\n\\nfunction _setTokenEvent(\\n\\t\\tuint256 EventTokenId,\\n\\t\\tuint256 EventId,\\n\\t\\tstring memory _tokenURI\\n\\t) public virtual {\\n\\t\\tAllEventTokens[EventTokenId] = [\\n\\t\\t\\tStrings.toString(EventId),\\n\\t\\t\\tstring(_tokenURI)\\n\\t\\t];\\n\\t}\\nfunction createEvent(string memory _eventWallet,string memory _eventURI)\\n\\t\\tpublic\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\t_setEventURI(_eventIds,_eventWallet, _eventURI);\\n\\t\\t_setEventRaised(_eventIds, \\\"0\\\");\\n\\t\\t_eventIds++;\\n\\n\\t\\treturn _eventIds;\\n\\t}\\n\\t\\n\\nfunction setGrantProject(\\t\\n\\t\\tuint256 GrantProjectId,\\n\\t\\tuint256 ProjectId,\\n\\t\\tuint256 GranttId\\n\\t) public virtual {\\n\\t\\tAllGrantProject[GrantProjectId] = [GranttId,ProjectId];\\n\\n\\t}\\n\\n\\nfunction CreateGrantProject(\\n\\t\\tuint256 ProjectId,\\n\\t\\tuint256 GranttId\\n\\t) public returns (uint256) {\\n\\t\\tsetGrantProject(_GrantProjectIds,ProjectId,GranttId);\\n\\t\\t_GrantProjectIds++;\\n\\t\\t\\n\\t\\treturn _GrantProjectIds;\\n\\t}\\n\\n\\n\\n\\nfunction createGrantEvent(string memory _eventURI)\\n\\t\\tpublic\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\t_setGrantEventURI(_GrantEventIds, _eventURI);\\n\\t\\t_GrantEventIds++;\\n\\n\\t\\treturn _GrantEventIds;\\n\\t}\\n\\n\\nfunction getSearchedProjectByGrantID(uint256 Grantid)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (uint256[] memory)\\n\\t{\\n\\t\\t\\n\\t\\tuint256 _TemporarySearch = 0;\\n\\t\\tuint256 _SearchIds = 0;\\n\\t\\t\\n\\t\\t\\n\\t\\tfor (uint256 i = 0; i < _GrantProjectIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tAllGrantProject[i][0] == Grantid\\n\\t\\t\\t) {\\n\\t\\t\\t\\t_TemporarySearch++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tuint256[] memory _SearchedProject = new uint256[](_TemporarySearch);\\n\\n\\t\\tfor (uint256 i = 0; i < _GrantProjectIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tAllGrantProject[i][0] == Grantid\\n\\t\\t\\t) {\\n\\t\\t\\t\\t_SearchedProject[_SearchIds] = AllGrantProject[i][1];\\n\\t\\t\\t\\t_SearchIds++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\n\\t\\treturn _SearchedProject;\\n\\t}\\n\\nfunction setGrantVote(\\t\\n\\t\\tuint256 GrantVoteId,\\n\\t\\tstring memory Wallet,\\n\\t\\tstring memory  ProjectId,\\n\\t\\tstring memory  GranttId\\n\\t) public virtual {\\n\\t\\tAllGrantVotes[GrantVoteId] = [GranttId,ProjectId,Wallet];\\n\\n\\t}\\n\\n\\nfunction createGrantVote(string memory Wallet,uint256 ProjectId,uint256 GranttId)\\n\\t\\tpublic\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tsetGrantVote(_GrantVoteIds, Wallet,Strings.toString(ProjectId),Strings.toString(GranttId));\\n\\t\\t_GrantVoteIds++;\\n\\n\\t\\treturn _GrantVoteIds;\\n\\t}\\nfunction getSearchedGrantVoteProject(uint256 Grantid,uint256 ProjectId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string[] memory)\\n\\t{\\n\\t\\t\\n\\t\\tuint256 _TemporarySearch = 0;\\n\\t\\tuint256 _SearchIds = 0;\\n\\t\\t\\n\\t\\t\\n\\t\\tfor (uint256 i = 0; i < _GrantVoteIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(AllGrantVotes[i][0])) == keccak256(bytes(Strings.toString(Grantid))) &&\\n\\t\\t\\t\\tkeccak256(bytes(AllGrantVotes[i][1])) == keccak256(bytes(Strings.toString(ProjectId)))\\n\\t\\t\\t\\t\\n\\t\\t\\t) {\\n\\t\\t\\t\\t_TemporarySearch++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tstring[] memory _SearchedProject = new string[](_TemporarySearch);\\n\\n\\t\\n\\t\\tfor (uint256 i = 0; i < _GrantVoteIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(AllGrantVotes[i][0])) == keccak256(bytes(Strings.toString(Grantid))) &&\\n\\t\\t\\t\\tkeccak256(bytes(AllGrantVotes[i][1])) == keccak256(bytes(Strings.toString(ProjectId)))\\n\\t\\t\\t\\t\\n\\t\\t\\t) {\\n\\t\\t\\t_SearchedProject[_SearchIds] = AllGrantVotes[i][2];\\n\\t\\t\\t_SearchIds++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\n\\t\\treturn _SearchedProject;\\n\\t}\\n\\n\\n\\nfunction gettokenIdByUri(string memory _tokenURI)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tfor (uint256 i = 0; i < _tokenIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(_tokenURIs[i])) == keccak256(bytes(_tokenURI))\\n\\t\\t\\t) {\\n\\t\\t\\t\\treturn i;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn 0;\\n\\t}\\n\\nfunction getBidIdByUri(string memory _bidURI)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tfor (uint256 i = 0; i < _bidIds; i++) {\\n\\t\\t\\tif (keccak256(bytes(_bidURIs[i])) == keccak256(bytes(_bidURI))) {\\n\\t\\t\\t\\treturn i;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn 0;\\n\\t}\\n\\nfunction gettokenSearchEventTotal(uint256 EventID)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string[] memory)\\n\\t{\\n\\t\\tstring[] memory _SearchedStoreToken = new string[](10);\\n\\n\\t\\tuint256 _EventTokenSearchIds2 = 0;\\n\\n\\t\\tfor (uint256 i = 0; i < _EventTokenIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(AllEventTokens[i][0])) ==\\n\\t\\t\\t\\tkeccak256(bytes(Strings.toString(EventID)))\\n\\t\\t\\t) {\\n\\t\\t\\t\\t_SearchedStoreToken[_EventTokenSearchIds2] = AllEventTokens[i][\\n\\t\\t\\t\\t\\t1\\n\\t\\t\\t\\t];\\n\\t\\t\\t\\t_EventTokenSearchIds2++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn _SearchedStoreToken;\\n\\t}\\n\\nfunction getSearchEventbyWallet(string memory Wallet)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string[] memory)\\n\\t{\\n\\t\\n\\t\\tuint256 _TemporarySearch = 0;\\n\\t\\tuint256 _SearchIds = 0;\\n\\n\\t\\tfor (uint256 i = 0; i < _eventIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(_eventURIs[i][0])) ==\\n\\t\\t\\t\\tkeccak256(bytes(Wallet))\\n\\t\\t\\t) {\\n\\t\\t\\t\\t_TemporarySearch++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tstring[] memory _SearchedStoreEvents = new string[](_TemporarySearch);\\n\\t\\tfor (uint256 i = 0; i < _eventIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(_eventURIs[i][0])) ==\\n\\t\\t\\t\\tkeccak256(bytes(Wallet))\\n\\t\\t\\t) {\\n\\t\\t\\t\\t_SearchedStoreEvents[_SearchIds] = _eventURIs[i][1];\\n\\t\\t\\t\\t_SearchIds++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\n\\t\\treturn _SearchedStoreEvents;\\n\\t}\\n\\nfunction getGetEventsTokenID(uint256 EventId, string memory _tokenURI)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tfor (uint256 i = 0; i < _EventTokenIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(AllEventTokens[i][0])) ==\\n\\t\\t\\t\\tkeccak256(bytes(Strings.toString(EventId))) &&\\n\\t\\t\\t\\tkeccak256(bytes(AllEventTokens[i][1])) ==\\n\\t\\t\\t\\tkeccak256(bytes(_tokenURI))\\n\\t\\t\\t) {\\n\\t\\t\\t\\treturn i;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn 0;\\n\\t}\\n\\nfunction _getSearchedTokenURI(uint256 _tokenId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string memory)\\n\\t{\\n\\t\\treturn _SearchedStore[_tokenId][0];\\n\\t}\\n\\nfunction _setEventURI(uint256 eventId,  string memory _eventWallet ,string memory _eventURI)\\n\\t\\tpublic\\n\\t\\tvirtual\\n\\t{\\n\\t\\t_eventURIs[eventId] = [\\n\\t\\t\\t_eventWallet,\\n\\t\\t\\t_eventURI\\n\\t\\t];\\n\\t\\t_eventRaised[eventId] = \\\"0\\\";\\n\\t}\\n\\nfunction _setGrantEventURI(uint256 eventId, string memory _eventURI)\\n\\t\\tpublic\\n\\t\\tvirtual\\n\\t{\\n\\t\\t_GrantEventURIs[eventId] = _eventURI;\\n\\t}\\n\\n\\nfunction _setTokenURI(uint256 tokenId, string memory _tokenURI)\\n\\t\\tpublic\\n\\t\\tvirtual\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\t_exists(tokenId),\\n\\t\\t\\t\\\"ERC721Metadata: URI set of nonexistent token\\\"\\n\\t\\t);\\n\\t\\t_tokenURIs[tokenId] = _tokenURI;\\n\\t}\\n\\nfunction eventURI(uint256 eventId) public view returns (string[2] memory) {\\n\\t\\treturn _eventURIs[eventId];\\n\\t}\\n\\nfunction tokenURI(uint256 tokenId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (string memory)\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\t_exists(tokenId),\\n\\t\\t\\t\\\"ERC721Metadata: URI query for nonexistent token\\\"\\n\\t\\t);\\n\\n\\t\\treturn _tokenURIs[tokenId];\\n\\t}\\n\\nfunction totalSupply() public view returns (uint256) {\\n\\t\\treturn _tokenIds;\\n\\t}\\n\\nfunction totalEvent() public view returns (uint256) {\\n\\t\\treturn _eventIds;\\n\\t}\\n\\nfunction totalGrantEvent() public view returns (uint256) {\\n\\t\\treturn _GrantProjectIds;\\n\\t}\\n\\nfunction _setBidURI(uint256 bidId, string memory _bidURI) public virtual {\\n\\t\\t_bidURIs[bidId] = _bidURI;\\n\\t}\\n\\nfunction BidURI(uint256 BidId) public view returns (string memory) {\\n\\t\\treturn _bidURIs[BidId];\\n\\t}\\n\\nfunction getTotalBid(uint256 TokenID)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string[] memory)\\n\\t{\\n\\t\\tstring[] memory _SearchedStoreBid = new string[](10);\\n\\n\\t\\tuint256 _TokenBidSearchIds2 = 0;\\n\\n\\t\\tfor (uint256 i = 0; i < _TokenBidIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(AllTokensBids[i][0])) ==\\n\\t\\t\\t\\tkeccak256(bytes(Strings.toString(TokenID)))\\n\\t\\t\\t) {\\n\\t\\t\\t\\t_SearchedStoreBid[_TokenBidSearchIds2] = AllTokensBids[i][1];\\n\\t\\t\\t\\t_TokenBidSearchIds2++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn _SearchedStoreBid;\\n\\t}\\n\\nfunction getBidsSearchToken(uint256 TokenID)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string[] memory)\\n\\t{\\n\\t\\tstring[] memory _SearchedStoreBid = new string[](10);\\n\\n\\t\\tuint256 _TokenBidSearchIds2 = 0;\\n\\n\\t\\tfor (uint256 i = 0; i < _TokenBidIds; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tkeccak256(bytes(AllTokensBids[i][0])) ==\\n\\t\\t\\t\\tkeccak256(bytes(Strings.toString(TokenID)))\\n\\t\\t\\t) {\\n\\t\\t\\t\\t_SearchedStoreBid[_TokenBidSearchIds2] = AllTokensBids[i][1];\\n\\t\\t\\t\\t_TokenBidSearchIds2++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn _SearchedStoreBid;\\n\\t}\\n\\nfunction _setTokenBid(\\n\\t\\tuint256 TokenBidId,\\n\\t\\tuint256 TokenId,\\n\\t\\tstring memory _BidURI\\n\\t) public virtual {\\n\\t\\tAllTokensBids[TokenBidId] = [\\n\\t\\t\\tStrings.toString(TokenId),\\n\\t\\t\\tstring(_BidURI)\\n\\t\\t];\\n\\t}\\n \\nfunction getEventRaised(uint256 _eventId)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (string memory)\\n\\t{\\n\\t\\treturn _eventRaised[_eventId];\\n\\t}\\n\\nfunction _setEventRaised(uint256 _eventId, string memory _raised)\\n\\t\\tpublic\\n\\t{\\n\\t\\t_eventRaised[_eventId] = _raised;\\n\\t}\\n\\n\\n \\nfunction createBid(\\n\\t\\tuint256 _tokenId,\\n\\t\\tstring memory _bidURI,\\n\\t\\tstring memory _updatedURI,\\n\\t\\tuint256 _eventid\\n\\t) public   {\\n\\t\\tuint256 _EventTokenId = getGetEventsTokenID(\\n\\t\\t\\t_eventid,\\n\\t\\t\\t_tokenURIs[_tokenId]\\n\\t\\t);\\n\\t\\t_tokenURIs[_tokenId] = _updatedURI;\\n\\t\\t_setTokenEvent(_EventTokenId, _eventid, _updatedURI);\\n\\n\\t\\t_setTokenBid(_TokenBidIds, _tokenId, _bidURI);\\n\\t\\t_TokenBidIds++;\\n\\t\\t_bidIds++;\\n\\t}\\n}\\n\",\"keccak256\":\"0x41ceeb108f1a80e01b2df357432bcee4067f5f1c5eb9798ea5bbc58e34c886da\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162005541380380620055418339818101604052810190620000379190620001a3565b818181600090805190602001906200005192919062000075565b5080600190805190602001906200006a92919062000075565b5050505050620003ac565b8280546200008390620002bd565b90600052602060002090601f016020900481019282620000a75760008555620000f3565b82601f10620000c257805160ff1916838001178555620000f3565b82800160010185558215620000f3579182015b82811115620000f2578251825591602001919060010190620000d5565b5b50905062000102919062000106565b5090565b5b808211156200012157600081600090555060010162000107565b5090565b60006200013c620001368462000251565b62000228565b9050828152602081018484840111156200015b576200015a6200038c565b5b6200016884828562000287565b509392505050565b600082601f83011262000188576200018762000387565b5b81516200019a84826020860162000125565b91505092915050565b60008060408385031215620001bd57620001bc62000396565b5b600083015167ffffffffffffffff811115620001de57620001dd62000391565b5b620001ec8582860162000170565b925050602083015167ffffffffffffffff81111562000210576200020f62000391565b5b6200021e8582860162000170565b9150509250929050565b60006200023462000247565b9050620002428282620002f3565b919050565b6000604051905090565b600067ffffffffffffffff8211156200026f576200026e62000358565b5b6200027a826200039b565b9050602081019050919050565b60005b83811015620002a75780820151818401526020810190506200028a565b83811115620002b7576000848401525b50505050565b60006002820490506001821680620002d657607f821691505b60208210811415620002ed57620002ec62000329565b5b50919050565b620002fe826200039b565b810181811067ffffffffffffffff8211171562000320576200031f62000358565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b61518580620003bc6000396000f3fe608060405234801561001057600080fd5b50600436106102f15760003560e01c80637cedbc1e1161019d578063c08e953d116100e9578063dfc5e169116100a2578063e985e9c51161007c578063e985e9c514610a1e578063eb1d234d14610a4e578063f327579414610a7e578063f880eb1914610a9a576102f1565b8063dfc5e169146109a2578063e08033d3146109d2578063e257a94c146109ee576102f1565b8063c08e953d146108ba578063c87b56dd146108ea578063cef80b3a1461091a578063d45fc51614610938578063d654e99314610968578063dcbe2ed914610984576102f1565b806396d5a73911610156578063a99bee2e11610130578063a99bee2e14610820578063aed479611461083e578063b10a5dfa1461086e578063b88d4fde1461089e576102f1565b806396d5a739146107a4578063a0fd0c6a146107d4578063a22cb46514610804576102f1565b80637cedbc1e146106bc5780637eadfa6a146106ec57806384eb8f681461070a578063912101cf14610726578063932a196b1461075657806395d89b4114610786576102f1565b806328520ab71161025c5780634ef4e80f1161021557806353c227cc116101ef57806353c227cc1461061057806361958158146106405780636352211e1461065c57806370a082311461068c576102f1565b80634ef4e80f146105805780635154380a146105b057806352379627146105e0576102f1565b806328520ab71461048857806335011d90146104b85780633592dd80146104e857806342842e0e14610504578063446a92e3146105205780634eb083ec14610550576102f1565b80630da3c49c116102ae5780630da3c49c146103c8578063144cbca6146103e45780631677bf081461040257806318160ddd1461041e5780631e65e1171461043c57806323b872dd1461046c576102f1565b806301538868146102f657806301ffc9a71461031257806306fdde0314610342578063081812fc14610360578063095ea7b3146103905780630ae240cf146103ac575b600080fd5b610310600480360381019061030b9190613c91565b610ab8565b005b61032c60048036038101906103279190613ada565b610b2c565b604051610339919061459f565b60405180910390f35b61034a610c0e565b60405161035791906145ba565b60405180910390f35b61037a60048036038101906103759190613c64565b610ca0565b60405161038791906144d2565b60405180910390f35b6103aa60048036038101906103a59190613a9a565b610d25565b005b6103c660048036038101906103c19190613d78565b610e3d565b005b6103e260048036038101906103dd9190613e33565b610e80565b005b6103ec610fa0565b6040516103f991906147bc565b60405180910390f35b61041c60048036038101906104179190613c91565b610fa6565b005b610426610fd2565b60405161043391906147bc565b60405180910390f35b61045660048036038101906104519190613b34565b610fdc565b604051610463919061455b565b60405180910390f35b61048660048036038101906104819190613915565b611200565b005b6104a2600480360381019061049d9190613c91565b611260565b6040516104af91906147bc565b60405180910390f35b6104d260048036038101906104cd9190613a2b565b611339565b6040516104df91906147bc565b60405180910390f35b61050260048036038101906104fd9190613f12565b61139c565b005b61051e60048036038101906105199190613915565b6113e0565b005b61053a60048036038101906105359190613c64565b611400565b60405161054791906145ba565b60405180910390f35b61056a60048036038101906105659190613c64565b6114a5565b60405161057791906145ba565b60405180910390f35b61059a60048036038101906105959190613ed2565b61154a565b6040516105a791906147bc565b60405180910390f35b6105ca60048036038101906105c59190613c64565b61157c565b6040516105d7919061455b565b60405180910390f35b6105fa60048036038101906105f59190613b34565b61172c565b60405161060791906147bc565b60405180910390f35b61062a60048036038101906106259190613c64565b61175c565b60405161063791906145ba565b60405180910390f35b61065a60048036038101906106559190613ced565b6117fc565b005b61067660048036038101906106719190613c64565b611895565b60405161068391906144d2565b60405180910390f35b6106a660048036038101906106a191906138a8565b611947565b6040516106b391906147bc565b60405180910390f35b6106d660048036038101906106d19190613c64565b6119ff565b6040516106e391906145ba565b60405180910390f35b6106f4611ab8565b60405161070191906147bc565b60405180910390f35b610724600480360381019061071f9190613c91565b611ac2565b005b610740600480360381019061073b9190613ed2565b611aee565b60405161074d919061455b565b60405180910390f35b610770600480360381019061076b9190613b34565b611dcd565b60405161077d91906147bc565b60405180910390f35b61078e611e3c565b60405161079b91906145ba565b60405180910390f35b6107be60048036038101906107b99190613c64565b611ece565b6040516107cb919061457d565b60405180910390f35b6107ee60048036038101906107e99190613c64565b612030565b6040516107fb9190614539565b60405180910390f35b61081e600480360381019061081991906139eb565b612110565b005b610828612126565b60405161083591906147bc565b60405180910390f35b61085860048036038101906108539190613c64565b61212c565b604051610865919061455b565b60405180910390f35b61088860048036038101906108839190613ed2565b6122dc565b60405161089591906145ba565b60405180910390f35b6108b860048036038101906108b39190613968565b61238c565b005b6108d460048036038101906108cf9190613bf5565b6123ee565b6040516108e191906147bc565b60405180910390f35b61090460048036038101906108ff9190613c64565b612432565b60405161091191906145ba565b60405180910390f35b61092261251f565b60405161092f91906147bc565b60405180910390f35b610952600480360381019061094d9190613b34565b612525565b60405161095f91906147bc565b60405180910390f35b610982600480360381019061097d9190613f12565b612594565b005b61098c6125d8565b60405161099991906147bc565b60405180910390f35b6109bc60048036038101906109b79190613c64565b6125de565b6040516109c991906145ba565b60405180910390f35b6109ec60048036038101906109e79190613c91565b61267e565b005b610a086004803603810190610a039190613b7d565b6126aa565b604051610a1591906147bc565b60405180910390f35b610a386004803603810190610a3391906138d5565b61271d565b604051610a45919061459f565b60405180910390f35b610a686004803603810190610a639190613c64565b6127b1565b604051610a75919061455b565b60405180910390f35b610a986004803603810190610a939190613f81565b612961565b005b610aa261299d565b604051610aaf91906147bc565b60405180910390f35b610ac1826129a7565b610b00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af79061473c565b60405180910390fd5b80601560008481526020019081526020016000209080519060200190610b2792919061354b565b505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610bf757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610c075750610c0682612a13565b5b9050919050565b606060008054610c1d90614ad7565b80601f0160208091040260200160405190810160405280929190818152602001828054610c4990614ad7565b8015610c965780601f10610c6b57610100808354040283529160200191610c96565b820191906000526020600020905b815481529060010190602001808311610c7957829003601f168201915b5050505050905090565b6000610cab826129a7565b610cea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce19061471c565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610d3082611895565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610da1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d989061477c565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610dc0612a7d565b73ffffffffffffffffffffffffffffffffffffffff161480610def5750610dee81610de9612a7d565b61271d565b5b610e2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e259061469c565b60405180910390fd5b610e388383612a85565b505050565b60405180606001604052808281526020018381526020018481525060106000868152602001908152602001600020906003610e799291906135d1565b5050505050565b6000610f2782601560008881526020019081526020016000208054610ea490614ad7565b80601f0160208091040260200160405190810160405280929190818152602001828054610ed090614ad7565b8015610f1d5780601f10610ef257610100808354040283529160200191610f1d565b820191906000526020600020905b815481529060010190602001808311610f0057829003601f168201915b5050505050611260565b905082601560008781526020019081526020016000209080519060200190610f5092919061354b565b50610f5c81838561139c565b610f69600d548686612594565b600d6000815480929190610f7c90614b3a565b919050555060076000815480929190610f9490614b3a565b91905055505050505050565b600e5481565b80601960008481526020019081526020016000209080519060200190610fcd92919061354b565b505050565b6000600654905090565b606060008060005b60085481101561105a5784805190602001206016600083815260200190815260200160002060006002811061101c5761101b614c41565b5b0160405161102a91906144bb565b6040518091039020141561104757828061104390614b3a565b9350505b808061105290614b3a565b915050610fe4565b5060008267ffffffffffffffff81111561107757611076614c70565b5b6040519080825280602002602001820160405280156110aa57816020015b60608152602001906001900390816110955790505b50905060005b6008548110156111f4578580519060200120601660008381526020019081526020016000206000600281106110e8576110e7614c41565b5b016040516110f691906144bb565b604051809103902014156111e1576016600082815260200190815260200160002060016002811061112a57611129614c41565b5b01805461113690614ad7565b80601f016020809104026020016040519081016040528092919081815260200182805461116290614ad7565b80156111af5780601f10611184576101008083540402835291602001916111af565b820191906000526020600020905b81548152906001019060200180831161119257829003601f168201915b50505050508284815181106111c7576111c6614c41565b5b602002602001018190525082806111dd90614b3a565b9350505b80806111ec90614b3a565b9150506110b0565b50809350505050919050565b61121161120b612a7d565b82612b3e565b611250576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112479061479c565b60405180910390fd5b61125b838383612c1c565b505050565b600080600090505b600c5481101561132d5761127b84612e83565b80519060200120600f60008381526020019081526020016000206000600281106112a8576112a7614c41565b5b016040516112b691906144bb565b604051809103902014801561130c57508280519060200120600f60008381526020019081526020016000206001600281106112f4576112f3614c41565b5b0160405161130291906144bb565b6040518091039020145b1561131a5780915050611333565b808061132590614b3a565b915050611268565b50600090505b92915050565b600061134784600654612fe4565b61135360065484610ab8565b611360600c54838561139c565b6006600081548092919061137390614b3a565b9190505550600c600081548092919061138b90614b3a565b919050555060065490509392505050565b60405180604001604052806113b084612e83565b815260200182815250600f60008581526020019081526020016000209060026113da929190613624565b50505050565b6113fb8383836040518060200160405280600081525061238c565b505050565b606060146000838152602001908152602001600020805461142090614ad7565b80601f016020809104026020016040519081016040528092919081815260200182805461144c90614ad7565b80156114995780601f1061146e57610100808354040283529160200191611499565b820191906000526020600020905b81548152906001019060200180831161147c57829003601f168201915b50505050509050919050565b60606019600083815260200190815260200160002080546114c590614ad7565b80601f01602080910402602001604051908101604052809291908181526020018280546114f190614ad7565b801561153e5780601f106115135761010080835404028352916020019161153e565b820191906000526020600020905b81548152906001019060200180831161152157829003601f168201915b50505050509050919050565b6000611559600a548484612961565b600a600081548092919061156c90614b3a565b9190505550600a54905092915050565b60606000600a67ffffffffffffffff81111561159b5761159a614c70565b5b6040519080825280602002602001820160405280156115ce57816020015b60608152602001906001900390816115b95790505b5090506000805b600d54811015611721576115e885612e83565b805190602001206012600083815260200190815260200160002060006002811061161557611614614c41565b5b0160405161162391906144bb565b6040518091039020141561170e576012600082815260200190815260200160002060016002811061165757611656614c41565b5b01805461166390614ad7565b80601f016020809104026020016040519081016040528092919081815260200182805461168f90614ad7565b80156116dc5780601f106116b1576101008083540402835291602001916116dc565b820191906000526020600020905b8154815290600101906020018083116116bf57829003601f168201915b50505050508383815181106116f4576116f3614c41565b5b6020026020010181905250818061170a90614b3a565b9250505b808061171990614b3a565b9150506115d5565b508192505050919050565b600061173a60095483611ac2565b6009600081548092919061174d90614b3a565b91905055506009549050919050565b6018602052806000526040600020600091509050805461177b90614ad7565b80601f01602080910402602001604051908101604052809291908181526020018280546117a790614ad7565b80156117f45780601f106117c9576101008083540402835291602001916117f4565b820191906000526020600020905b8154815290600101906020018083116117d757829003601f168201915b505050505081565b60405180604001604052808381526020018281525060166000858152602001908152602001600020906002611832929190613624565b506040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525060196000858152602001908152602001600020908051906020019061188f92919061354b565b50505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561193e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611935906146dc565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156119b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119af906146bc565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060136000838152602001908152602001600020600060028110611a2757611a26614c41565b5b018054611a3390614ad7565b80601f0160208091040260200160405190810160405280929190818152602001828054611a5f90614ad7565b8015611aac5780601f10611a8157610100808354040283529160200191611aac565b820191906000526020600020905b815481529060010190602001808311611a8f57829003601f168201915b50505050509050919050565b6000600854905090565b80601760008481526020019081526020016000209080519060200190611ae992919061354b565b505050565b606060008060005b600b54811015611bc957611b0986612e83565b8051906020012060106000838152602001908152602001600020600060038110611b3657611b35614c41565b5b01604051611b4491906144bb565b6040518091039020148015611ba25750611b5d85612e83565b8051906020012060106000838152602001908152602001600020600160038110611b8a57611b89614c41565b5b01604051611b9891906144bb565b6040518091039020145b15611bb6578280611bb290614b3a565b9350505b8080611bc190614b3a565b915050611af6565b5060008267ffffffffffffffff811115611be657611be5614c70565b5b604051908082528060200260200182016040528015611c1957816020015b6060815260200190600190039081611c045790505b50905060005b600b54811015611dc057611c3287612e83565b8051906020012060106000838152602001908152602001600020600060038110611c5f57611c5e614c41565b5b01604051611c6d91906144bb565b6040518091039020148015611ccb5750611c8686612e83565b8051906020012060106000838152602001908152602001600020600160038110611cb357611cb2614c41565b5b01604051611cc191906144bb565b6040518091039020145b15611dad5760106000828152602001908152602001600020600260038110611cf657611cf5614c41565b5b018054611d0290614ad7565b80601f0160208091040260200160405190810160405280929190818152602001828054611d2e90614ad7565b8015611d7b5780601f10611d5057610100808354040283529160200191611d7b565b820191906000526020600020905b815481529060010190602001808311611d5e57829003601f168201915b5050505050828481518110611d9357611d92614c41565b5b60200260200101819052508280611da990614b3a565b9350505b8080611db890614b3a565b915050611c1f565b5080935050505092915050565b600080600090505b600654811015611e3157828051906020012060156000838152602001908152602001600020604051611e0791906144bb565b60405180910390201415611e1e5780915050611e37565b8080611e2990614b3a565b915050611dd5565b50600090505b919050565b606060018054611e4b90614ad7565b80601f0160208091040260200160405190810160405280929190818152602001828054611e7790614ad7565b8015611ec45780601f10611e9957610100808354040283529160200191611ec4565b820191906000526020600020905b815481529060010190602001808311611ea757829003601f168201915b5050505050905090565b606060008060005b600a54811015611f31578460116000838152602001908152602001600020600060028110611f0757611f06614c41565b5b01541415611f1e578280611f1a90614b3a565b9350505b8080611f2990614b3a565b915050611ed6565b5060008267ffffffffffffffff811115611f4e57611f4d614c70565b5b604051908082528060200260200182016040528015611f7c5781602001602082028036833780820191505090505b50905060005b600a54811015612024578560116000838152602001908152602001600020600060028110611fb357611fb2614c41565b5b015414156120115760116000828152602001908152602001600020600160028110611fe157611fe0614c41565b5b0154828481518110611ff657611ff5614c41565b5b602002602001018181525050828061200d90614b3a565b9350505b808061201c90614b3a565b915050611f82565b50809350505050919050565b612038613677565b60166000838152602001908152602001600020600280602002604051908101604052809291906000905b8282101561210557838201805461207890614ad7565b80601f01602080910402602001604051908101604052809291908181526020018280546120a490614ad7565b80156120f15780601f106120c6576101008083540402835291602001916120f1565b820191906000526020600020905b8154815290600101906020018083116120d457829003601f168201915b505050505081526020019060010190612062565b505050509050919050565b61212261211b612a7d565b83836131be565b5050565b60095481565b60606000600a67ffffffffffffffff81111561214b5761214a614c70565b5b60405190808252806020026020018201604052801561217e57816020015b60608152602001906001900390816121695790505b5090506000805b600d548110156122d15761219885612e83565b80519060200120601260008381526020019081526020016000206000600281106121c5576121c4614c41565b5b016040516121d391906144bb565b604051809103902014156122be576012600082815260200190815260200160002060016002811061220757612206614c41565b5b01805461221390614ad7565b80601f016020809104026020016040519081016040528092919081815260200182805461223f90614ad7565b801561228c5780601f106122615761010080835404028352916020019161228c565b820191906000526020600020905b81548152906001019060200180831161226f57829003601f168201915b50505050508383815181106122a4576122a3614c41565b5b602002602001018190525081806122ba90614b3a565b9250505b80806122c990614b3a565b915050612185565b508192505050919050565b601360205281600052604060002081600281106122f857600080fd5b0160009150915050805461230b90614ad7565b80601f016020809104026020016040519081016040528092919081815260200182805461233790614ad7565b80156123845780601f1061235957610100808354040283529160200191612384565b820191906000526020600020905b81548152906001019060200180831161236757829003601f168201915b505050505081565b61239d612397612a7d565b83612b3e565b6123dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123d39061479c565b60405180910390fd5b6123e88484848461332b565b50505050565b600061240e600b548561240086612e83565b61240986612e83565b610e3d565b600b600081548092919061242190614b3a565b9190505550600b5490509392505050565b606061243d826129a7565b61247c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124739061475c565b60405180910390fd5b60156000838152602001908152602001600020805461249a90614ad7565b80601f01602080910402602001604051908101604052809291908181526020018280546124c690614ad7565b80156125135780601f106124e857610100808354040283529160200191612513565b820191906000526020600020905b8154815290600101906020018083116124f657829003601f168201915b50505050509050919050565b600a5481565b600080600090505b6007548110156125895782805190602001206014600083815260200190815260200160002060405161255f91906144bb565b60405180910390201415612576578091505061258f565b808061258190614b3a565b91505061252d565b50600090505b919050565b60405180604001604052806125a884612e83565b815260200182815250601260008581526020019081526020016000209060026125d2929190613624565b50505050565b600b5481565b601760205280600052604060002060009150905080546125fd90614ad7565b80601f016020809104026020016040519081016040528092919081815260200182805461262990614ad7565b80156126765780601f1061264b57610100808354040283529160200191612676565b820191906000526020600020905b81548152906001019060200180831161265957829003601f168201915b505050505081565b806014600084815260200190815260200160002090805190602001906126a592919061354b565b505050565b60006126b960085484846117fc565b6126fa6008546040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250610fa6565b6008600081548092919061270d90614b3a565b9190505550600854905092915050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60606000600a67ffffffffffffffff8111156127d0576127cf614c70565b5b60405190808252806020026020018201604052801561280357816020015b60608152602001906001900390816127ee5790505b5090506000805b600c548110156129565761281d85612e83565b80519060200120600f600083815260200190815260200160002060006002811061284a57612849614c41565b5b0160405161285891906144bb565b6040518091039020141561294357600f600082815260200190815260200160002060016002811061288c5761288b614c41565b5b01805461289890614ad7565b80601f01602080910402602001604051908101604052809291908181526020018280546128c490614ad7565b80156129115780601f106128e657610100808354040283529160200191612911565b820191906000526020600020905b8154815290600101906020018083116128f457829003601f168201915b505050505083838151811061292957612928614c41565b5b6020026020010181905250818061293f90614b3a565b9250505b808061294e90614b3a565b91505061280a565b508192505050919050565b6040518060400160405280828152602001838152506011600085815260200190815260200160002090600261299792919061369e565b50505050565b6000600a54905090565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16612af883611895565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000612b49826129a7565b612b88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b7f9061467c565b60405180910390fd5b6000612b9383611895565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480612bd55750612bd4818561271d565b5b80612c1357508373ffffffffffffffffffffffffffffffffffffffff16612bfb84610ca0565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16612c3c82611895565b73ffffffffffffffffffffffffffffffffffffffff1614612c92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c89906145fc565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612d02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cf99061463c565b60405180910390fd5b612d0d838383613387565b612d18600082612a85565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612d6891906149ed565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612dbf9190614966565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612e7e83838361338c565b505050565b60606000821415612ecb576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612fdf565b600082905060005b60008214612efd578080612ee690614b3a565b915050600a82612ef691906149bc565b9150612ed3565b60008167ffffffffffffffff811115612f1957612f18614c70565b5b6040519080825280601f01601f191660200182016040528015612f4b5781602001600182028036833780820191505090505b5090505b60008514612fd857600182612f6491906149ed565b9150600a85612f739190614b83565b6030612f7f9190614966565b60f81b818381518110612f9557612f94614c41565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85612fd191906149bc565b9450612f4f565b8093505050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613054576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161304b906146fc565b60405180910390fd5b61305d816129a7565b1561309d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130949061461c565b60405180910390fd5b6130a960008383613387565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546130f99190614966565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46131ba6000838361338c565b5050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561322d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132249061465c565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161331e919061459f565b60405180910390a3505050565b613336848484612c1c565b61334284848484613391565b613381576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613378906145dc565b60405180910390fd5b50505050565b505050565b505050565b60006133b28473ffffffffffffffffffffffffffffffffffffffff16613528565b1561351b578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026133db612a7d565b8786866040518563ffffffff1660e01b81526004016133fd94939291906144ed565b602060405180830381600087803b15801561341757600080fd5b505af192505050801561344857506040513d601f19601f820116820180604052508101906134459190613b07565b60015b6134cb573d8060008114613478576040519150601f19603f3d011682016040523d82523d6000602084013e61347d565b606091505b506000815114156134c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134ba906145dc565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050613520565b600190505b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b82805461355790614ad7565b90600052602060002090601f01602090048101928261357957600085556135c0565b82601f1061359257805160ff19168380011785556135c0565b828001600101855582156135c0579182015b828111156135bf5782518255916020019190600101906135a4565b5b5090506135cd91906136de565b5090565b8260038101928215613613579160200282015b8281111561361257825182908051906020019061360292919061354b565b50916020019190600101906135e4565b5b50905061362091906136fb565b5090565b8260028101928215613666579160200282015b8281111561366557825182908051906020019061365592919061354b565b5091602001919060010190613637565b5b50905061367391906136fb565b5090565b60405180604001604052806002905b60608152602001906001900390816136865790505090565b82600281019282156136cd579160200282015b828111156136cc5782518255916020019190600101906136b1565b5b5090506136da91906136de565b5090565b5b808211156136f75760008160009055506001016136df565b5090565b5b8082111561371b5760008181613712919061371f565b506001016136fc565b5090565b50805461372b90614ad7565b6000825580601f1061373d575061375c565b601f01602090049060005260206000209081019061375b91906136de565b5b50565b600061377261376d846147fc565b6147d7565b90508281526020810184848401111561378e5761378d614ca4565b5b613799848285614a95565b509392505050565b60006137b46137af8461482d565b6147d7565b9050828152602081018484840111156137d0576137cf614ca4565b5b6137db848285614a95565b509392505050565b6000813590506137f2816150f3565b92915050565b6000813590506138078161510a565b92915050565b60008135905061381c81615121565b92915050565b60008151905061383181615121565b92915050565b600082601f83011261384c5761384b614c9f565b5b813561385c84826020860161375f565b91505092915050565b600082601f83011261387a57613879614c9f565b5b813561388a8482602086016137a1565b91505092915050565b6000813590506138a281615138565b92915050565b6000602082840312156138be576138bd614cae565b5b60006138cc848285016137e3565b91505092915050565b600080604083850312156138ec576138eb614cae565b5b60006138fa858286016137e3565b925050602061390b858286016137e3565b9150509250929050565b60008060006060848603121561392e5761392d614cae565b5b600061393c868287016137e3565b935050602061394d868287016137e3565b925050604061395e86828701613893565b9150509250925092565b6000806000806080858703121561398257613981614cae565b5b6000613990878288016137e3565b94505060206139a1878288016137e3565b93505060406139b287828801613893565b925050606085013567ffffffffffffffff8111156139d3576139d2614ca9565b5b6139df87828801613837565b91505092959194509250565b60008060408385031215613a0257613a01614cae565b5b6000613a10858286016137e3565b9250506020613a21858286016137f8565b9150509250929050565b600080600060608486031215613a4457613a43614cae565b5b6000613a52868287016137e3565b935050602084013567ffffffffffffffff811115613a7357613a72614ca9565b5b613a7f86828701613865565b9250506040613a9086828701613893565b9150509250925092565b60008060408385031215613ab157613ab0614cae565b5b6000613abf858286016137e3565b9250506020613ad085828601613893565b9150509250929050565b600060208284031215613af057613aef614cae565b5b6000613afe8482850161380d565b91505092915050565b600060208284031215613b1d57613b1c614cae565b5b6000613b2b84828501613822565b91505092915050565b600060208284031215613b4a57613b49614cae565b5b600082013567ffffffffffffffff811115613b6857613b67614ca9565b5b613b7484828501613865565b91505092915050565b60008060408385031215613b9457613b93614cae565b5b600083013567ffffffffffffffff811115613bb257613bb1614ca9565b5b613bbe85828601613865565b925050602083013567ffffffffffffffff811115613bdf57613bde614ca9565b5b613beb85828601613865565b9150509250929050565b600080600060608486031215613c0e57613c0d614cae565b5b600084013567ffffffffffffffff811115613c2c57613c2b614ca9565b5b613c3886828701613865565b9350506020613c4986828701613893565b9250506040613c5a86828701613893565b9150509250925092565b600060208284031215613c7a57613c79614cae565b5b6000613c8884828501613893565b91505092915050565b60008060408385031215613ca857613ca7614cae565b5b6000613cb685828601613893565b925050602083013567ffffffffffffffff811115613cd757613cd6614ca9565b5b613ce385828601613865565b9150509250929050565b600080600060608486031215613d0657613d05614cae565b5b6000613d1486828701613893565b935050602084013567ffffffffffffffff811115613d3557613d34614ca9565b5b613d4186828701613865565b925050604084013567ffffffffffffffff811115613d6257613d61614ca9565b5b613d6e86828701613865565b9150509250925092565b60008060008060808587031215613d9257613d91614cae565b5b6000613da087828801613893565b945050602085013567ffffffffffffffff811115613dc157613dc0614ca9565b5b613dcd87828801613865565b935050604085013567ffffffffffffffff811115613dee57613ded614ca9565b5b613dfa87828801613865565b925050606085013567ffffffffffffffff811115613e1b57613e1a614ca9565b5b613e2787828801613865565b91505092959194509250565b60008060008060808587031215613e4d57613e4c614cae565b5b6000613e5b87828801613893565b945050602085013567ffffffffffffffff811115613e7c57613e7b614ca9565b5b613e8887828801613865565b935050604085013567ffffffffffffffff811115613ea957613ea8614ca9565b5b613eb587828801613865565b9250506060613ec687828801613893565b91505092959194509250565b60008060408385031215613ee957613ee8614cae565b5b6000613ef785828601613893565b9250506020613f0885828601613893565b9150509250929050565b600080600060608486031215613f2b57613f2a614cae565b5b6000613f3986828701613893565b9350506020613f4a86828701613893565b925050604084013567ffffffffffffffff811115613f6b57613f6a614ca9565b5b613f7786828701613865565b9150509250925092565b600080600060608486031215613f9a57613f99614cae565b5b6000613fa886828701613893565b9350506020613fb986828701613893565b9250506040613fca86828701613893565b9150509250925092565b6000613fe0838361421e565b905092915050565b6000613ff4838361449d565b60208301905092915050565b61400981614a21565b82525050565b600061401a8261489d565b61402481856148fb565b9350836020820285016140368561485e565b8060005b8581101561407257848403895281516140538582613fd4565b945061405e836148d4565b925060208a0199505060018101905061403a565b50829750879550505050505092915050565b600061408f826148a8565b6140998185614906565b9350836020820285016140ab85614868565b8060005b858110156140e757848403895281516140c88582613fd4565b94506140d3836148e1565b925060208a019950506001810190506140af565b50829750879550505050505092915050565b6000614104826148b3565b61410e8185614917565b935061411983614878565b8060005b8381101561414a5781516141318882613fe8565b975061413c836148ee565b92505060018101905061411d565b5085935050505092915050565b61416081614a33565b82525050565b6000614171826148be565b61417b8185614928565b935061418b818560208601614aa4565b61419481614cb3565b840191505092915050565b600081546141ac81614ad7565b6141b68186614939565b945060018216600081146141d157600181146141e257614215565b60ff19831686528186019350614215565b6141eb85614888565b60005b8381101561420d578154818901526001820191506020810190506141ee565b838801955050505b50505092915050565b6000614229826148c9565b6142338185614944565b9350614243818560208601614aa4565b61424c81614cb3565b840191505092915050565b6000614262826148c9565b61426c8185614955565b935061427c818560208601614aa4565b61428581614cb3565b840191505092915050565b600061429d603283614955565b91506142a882614cc4565b604082019050919050565b60006142c0602583614955565b91506142cb82614d13565b604082019050919050565b60006142e3601c83614955565b91506142ee82614d62565b602082019050919050565b6000614306602483614955565b915061431182614d8b565b604082019050919050565b6000614329601983614955565b915061433482614dda565b602082019050919050565b600061434c602c83614955565b915061435782614e03565b604082019050919050565b600061436f603883614955565b915061437a82614e52565b604082019050919050565b6000614392602a83614955565b915061439d82614ea1565b604082019050919050565b60006143b5602983614955565b91506143c082614ef0565b604082019050919050565b60006143d8602083614955565b91506143e382614f3f565b602082019050919050565b60006143fb602c83614955565b915061440682614f68565b604082019050919050565b600061441e602c83614955565b915061442982614fb7565b604082019050919050565b6000614441602f83614955565b915061444c82615006565b604082019050919050565b6000614464602183614955565b915061446f82615055565b604082019050919050565b6000614487603183614955565b9150614492826150a4565b604082019050919050565b6144a681614a8b565b82525050565b6144b581614a8b565b82525050565b60006144c7828461419f565b915081905092915050565b60006020820190506144e76000830184614000565b92915050565b60006080820190506145026000830187614000565b61450f6020830186614000565b61451c60408301856144ac565b818103606083015261452e8184614166565b905095945050505050565b60006020820190508181036000830152614553818461400f565b905092915050565b600060208201905081810360008301526145758184614084565b905092915050565b6000602082019050818103600083015261459781846140f9565b905092915050565b60006020820190506145b46000830184614157565b92915050565b600060208201905081810360008301526145d48184614257565b905092915050565b600060208201905081810360008301526145f581614290565b9050919050565b60006020820190508181036000830152614615816142b3565b9050919050565b60006020820190508181036000830152614635816142d6565b9050919050565b60006020820190508181036000830152614655816142f9565b9050919050565b600060208201905081810360008301526146758161431c565b9050919050565b600060208201905081810360008301526146958161433f565b9050919050565b600060208201905081810360008301526146b581614362565b9050919050565b600060208201905081810360008301526146d581614385565b9050919050565b600060208201905081810360008301526146f5816143a8565b9050919050565b60006020820190508181036000830152614715816143cb565b9050919050565b60006020820190508181036000830152614735816143ee565b9050919050565b6000602082019050818103600083015261475581614411565b9050919050565b6000602082019050818103600083015261477581614434565b9050919050565b6000602082019050818103600083015261479581614457565b9050919050565b600060208201905081810360008301526147b58161447a565b9050919050565b60006020820190506147d160008301846144ac565b92915050565b60006147e16147f2565b90506147ed8282614b09565b919050565b6000604051905090565b600067ffffffffffffffff82111561481757614816614c70565b5b61482082614cb3565b9050602081019050919050565b600067ffffffffffffffff82111561484857614847614c70565b5b61485182614cb3565b9050602081019050919050565b6000819050919050565b6000819050602082019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600060029050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600061497182614a8b565b915061497c83614a8b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156149b1576149b0614bb4565b5b828201905092915050565b60006149c782614a8b565b91506149d283614a8b565b9250826149e2576149e1614be3565b5b828204905092915050565b60006149f882614a8b565b9150614a0383614a8b565b925082821015614a1657614a15614bb4565b5b828203905092915050565b6000614a2c82614a6b565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015614ac2578082015181840152602081019050614aa7565b83811115614ad1576000848401525b50505050565b60006002820490506001821680614aef57607f821691505b60208210811415614b0357614b02614c12565b5b50919050565b614b1282614cb3565b810181811067ffffffffffffffff82111715614b3157614b30614c70565b5b80604052505050565b6000614b4582614a8b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614b7857614b77614bb4565b5b600182019050919050565b6000614b8e82614a8b565b9150614b9983614a8b565b925082614ba957614ba8614be3565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920736574206f66206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b6150fc81614a21565b811461510757600080fd5b50565b61511381614a33565b811461511e57600080fd5b50565b61512a81614a3f565b811461513557600080fd5b50565b61514181614a8b565b811461514c57600080fd5b5056fea26469706673582212200aeedc5da68e1fac606ad560156afa6113218134c34ef91a319b2f75f7189bff64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102f15760003560e01c80637cedbc1e1161019d578063c08e953d116100e9578063dfc5e169116100a2578063e985e9c51161007c578063e985e9c514610a1e578063eb1d234d14610a4e578063f327579414610a7e578063f880eb1914610a9a576102f1565b8063dfc5e169146109a2578063e08033d3146109d2578063e257a94c146109ee576102f1565b8063c08e953d146108ba578063c87b56dd146108ea578063cef80b3a1461091a578063d45fc51614610938578063d654e99314610968578063dcbe2ed914610984576102f1565b806396d5a73911610156578063a99bee2e11610130578063a99bee2e14610820578063aed479611461083e578063b10a5dfa1461086e578063b88d4fde1461089e576102f1565b806396d5a739146107a4578063a0fd0c6a146107d4578063a22cb46514610804576102f1565b80637cedbc1e146106bc5780637eadfa6a146106ec57806384eb8f681461070a578063912101cf14610726578063932a196b1461075657806395d89b4114610786576102f1565b806328520ab71161025c5780634ef4e80f1161021557806353c227cc116101ef57806353c227cc1461061057806361958158146106405780636352211e1461065c57806370a082311461068c576102f1565b80634ef4e80f146105805780635154380a146105b057806352379627146105e0576102f1565b806328520ab71461048857806335011d90146104b85780633592dd80146104e857806342842e0e14610504578063446a92e3146105205780634eb083ec14610550576102f1565b80630da3c49c116102ae5780630da3c49c146103c8578063144cbca6146103e45780631677bf081461040257806318160ddd1461041e5780631e65e1171461043c57806323b872dd1461046c576102f1565b806301538868146102f657806301ffc9a71461031257806306fdde0314610342578063081812fc14610360578063095ea7b3146103905780630ae240cf146103ac575b600080fd5b610310600480360381019061030b9190613c91565b610ab8565b005b61032c60048036038101906103279190613ada565b610b2c565b604051610339919061459f565b60405180910390f35b61034a610c0e565b60405161035791906145ba565b60405180910390f35b61037a60048036038101906103759190613c64565b610ca0565b60405161038791906144d2565b60405180910390f35b6103aa60048036038101906103a59190613a9a565b610d25565b005b6103c660048036038101906103c19190613d78565b610e3d565b005b6103e260048036038101906103dd9190613e33565b610e80565b005b6103ec610fa0565b6040516103f991906147bc565b60405180910390f35b61041c60048036038101906104179190613c91565b610fa6565b005b610426610fd2565b60405161043391906147bc565b60405180910390f35b61045660048036038101906104519190613b34565b610fdc565b604051610463919061455b565b60405180910390f35b61048660048036038101906104819190613915565b611200565b005b6104a2600480360381019061049d9190613c91565b611260565b6040516104af91906147bc565b60405180910390f35b6104d260048036038101906104cd9190613a2b565b611339565b6040516104df91906147bc565b60405180910390f35b61050260048036038101906104fd9190613f12565b61139c565b005b61051e60048036038101906105199190613915565b6113e0565b005b61053a60048036038101906105359190613c64565b611400565b60405161054791906145ba565b60405180910390f35b61056a60048036038101906105659190613c64565b6114a5565b60405161057791906145ba565b60405180910390f35b61059a60048036038101906105959190613ed2565b61154a565b6040516105a791906147bc565b60405180910390f35b6105ca60048036038101906105c59190613c64565b61157c565b6040516105d7919061455b565b60405180910390f35b6105fa60048036038101906105f59190613b34565b61172c565b60405161060791906147bc565b60405180910390f35b61062a60048036038101906106259190613c64565b61175c565b60405161063791906145ba565b60405180910390f35b61065a60048036038101906106559190613ced565b6117fc565b005b61067660048036038101906106719190613c64565b611895565b60405161068391906144d2565b60405180910390f35b6106a660048036038101906106a191906138a8565b611947565b6040516106b391906147bc565b60405180910390f35b6106d660048036038101906106d19190613c64565b6119ff565b6040516106e391906145ba565b60405180910390f35b6106f4611ab8565b60405161070191906147bc565b60405180910390f35b610724600480360381019061071f9190613c91565b611ac2565b005b610740600480360381019061073b9190613ed2565b611aee565b60405161074d919061455b565b60405180910390f35b610770600480360381019061076b9190613b34565b611dcd565b60405161077d91906147bc565b60405180910390f35b61078e611e3c565b60405161079b91906145ba565b60405180910390f35b6107be60048036038101906107b99190613c64565b611ece565b6040516107cb919061457d565b60405180910390f35b6107ee60048036038101906107e99190613c64565b612030565b6040516107fb9190614539565b60405180910390f35b61081e600480360381019061081991906139eb565b612110565b005b610828612126565b60405161083591906147bc565b60405180910390f35b61085860048036038101906108539190613c64565b61212c565b604051610865919061455b565b60405180910390f35b61088860048036038101906108839190613ed2565b6122dc565b60405161089591906145ba565b60405180910390f35b6108b860048036038101906108b39190613968565b61238c565b005b6108d460048036038101906108cf9190613bf5565b6123ee565b6040516108e191906147bc565b60405180910390f35b61090460048036038101906108ff9190613c64565b612432565b60405161091191906145ba565b60405180910390f35b61092261251f565b60405161092f91906147bc565b60405180910390f35b610952600480360381019061094d9190613b34565b612525565b60405161095f91906147bc565b60405180910390f35b610982600480360381019061097d9190613f12565b612594565b005b61098c6125d8565b60405161099991906147bc565b60405180910390f35b6109bc60048036038101906109b79190613c64565b6125de565b6040516109c991906145ba565b60405180910390f35b6109ec60048036038101906109e79190613c91565b61267e565b005b610a086004803603810190610a039190613b7d565b6126aa565b604051610a1591906147bc565b60405180910390f35b610a386004803603810190610a3391906138d5565b61271d565b604051610a45919061459f565b60405180910390f35b610a686004803603810190610a639190613c64565b6127b1565b604051610a75919061455b565b60405180910390f35b610a986004803603810190610a939190613f81565b612961565b005b610aa261299d565b604051610aaf91906147bc565b60405180910390f35b610ac1826129a7565b610b00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af79061473c565b60405180910390fd5b80601560008481526020019081526020016000209080519060200190610b2792919061354b565b505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610bf757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610c075750610c0682612a13565b5b9050919050565b606060008054610c1d90614ad7565b80601f0160208091040260200160405190810160405280929190818152602001828054610c4990614ad7565b8015610c965780601f10610c6b57610100808354040283529160200191610c96565b820191906000526020600020905b815481529060010190602001808311610c7957829003601f168201915b5050505050905090565b6000610cab826129a7565b610cea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce19061471c565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610d3082611895565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610da1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d989061477c565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610dc0612a7d565b73ffffffffffffffffffffffffffffffffffffffff161480610def5750610dee81610de9612a7d565b61271d565b5b610e2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e259061469c565b60405180910390fd5b610e388383612a85565b505050565b60405180606001604052808281526020018381526020018481525060106000868152602001908152602001600020906003610e799291906135d1565b5050505050565b6000610f2782601560008881526020019081526020016000208054610ea490614ad7565b80601f0160208091040260200160405190810160405280929190818152602001828054610ed090614ad7565b8015610f1d5780601f10610ef257610100808354040283529160200191610f1d565b820191906000526020600020905b815481529060010190602001808311610f0057829003601f168201915b5050505050611260565b905082601560008781526020019081526020016000209080519060200190610f5092919061354b565b50610f5c81838561139c565b610f69600d548686612594565b600d6000815480929190610f7c90614b3a565b919050555060076000815480929190610f9490614b3a565b91905055505050505050565b600e5481565b80601960008481526020019081526020016000209080519060200190610fcd92919061354b565b505050565b6000600654905090565b606060008060005b60085481101561105a5784805190602001206016600083815260200190815260200160002060006002811061101c5761101b614c41565b5b0160405161102a91906144bb565b6040518091039020141561104757828061104390614b3a565b9350505b808061105290614b3a565b915050610fe4565b5060008267ffffffffffffffff81111561107757611076614c70565b5b6040519080825280602002602001820160405280156110aa57816020015b60608152602001906001900390816110955790505b50905060005b6008548110156111f4578580519060200120601660008381526020019081526020016000206000600281106110e8576110e7614c41565b5b016040516110f691906144bb565b604051809103902014156111e1576016600082815260200190815260200160002060016002811061112a57611129614c41565b5b01805461113690614ad7565b80601f016020809104026020016040519081016040528092919081815260200182805461116290614ad7565b80156111af5780601f10611184576101008083540402835291602001916111af565b820191906000526020600020905b81548152906001019060200180831161119257829003601f168201915b50505050508284815181106111c7576111c6614c41565b5b602002602001018190525082806111dd90614b3a565b9350505b80806111ec90614b3a565b9150506110b0565b50809350505050919050565b61121161120b612a7d565b82612b3e565b611250576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112479061479c565b60405180910390fd5b61125b838383612c1c565b505050565b600080600090505b600c5481101561132d5761127b84612e83565b80519060200120600f60008381526020019081526020016000206000600281106112a8576112a7614c41565b5b016040516112b691906144bb565b604051809103902014801561130c57508280519060200120600f60008381526020019081526020016000206001600281106112f4576112f3614c41565b5b0160405161130291906144bb565b6040518091039020145b1561131a5780915050611333565b808061132590614b3a565b915050611268565b50600090505b92915050565b600061134784600654612fe4565b61135360065484610ab8565b611360600c54838561139c565b6006600081548092919061137390614b3a565b9190505550600c600081548092919061138b90614b3a565b919050555060065490509392505050565b60405180604001604052806113b084612e83565b815260200182815250600f60008581526020019081526020016000209060026113da929190613624565b50505050565b6113fb8383836040518060200160405280600081525061238c565b505050565b606060146000838152602001908152602001600020805461142090614ad7565b80601f016020809104026020016040519081016040528092919081815260200182805461144c90614ad7565b80156114995780601f1061146e57610100808354040283529160200191611499565b820191906000526020600020905b81548152906001019060200180831161147c57829003601f168201915b50505050509050919050565b60606019600083815260200190815260200160002080546114c590614ad7565b80601f01602080910402602001604051908101604052809291908181526020018280546114f190614ad7565b801561153e5780601f106115135761010080835404028352916020019161153e565b820191906000526020600020905b81548152906001019060200180831161152157829003601f168201915b50505050509050919050565b6000611559600a548484612961565b600a600081548092919061156c90614b3a565b9190505550600a54905092915050565b60606000600a67ffffffffffffffff81111561159b5761159a614c70565b5b6040519080825280602002602001820160405280156115ce57816020015b60608152602001906001900390816115b95790505b5090506000805b600d54811015611721576115e885612e83565b805190602001206012600083815260200190815260200160002060006002811061161557611614614c41565b5b0160405161162391906144bb565b6040518091039020141561170e576012600082815260200190815260200160002060016002811061165757611656614c41565b5b01805461166390614ad7565b80601f016020809104026020016040519081016040528092919081815260200182805461168f90614ad7565b80156116dc5780601f106116b1576101008083540402835291602001916116dc565b820191906000526020600020905b8154815290600101906020018083116116bf57829003601f168201915b50505050508383815181106116f4576116f3614c41565b5b6020026020010181905250818061170a90614b3a565b9250505b808061171990614b3a565b9150506115d5565b508192505050919050565b600061173a60095483611ac2565b6009600081548092919061174d90614b3a565b91905055506009549050919050565b6018602052806000526040600020600091509050805461177b90614ad7565b80601f01602080910402602001604051908101604052809291908181526020018280546117a790614ad7565b80156117f45780601f106117c9576101008083540402835291602001916117f4565b820191906000526020600020905b8154815290600101906020018083116117d757829003601f168201915b505050505081565b60405180604001604052808381526020018281525060166000858152602001908152602001600020906002611832929190613624565b506040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525060196000858152602001908152602001600020908051906020019061188f92919061354b565b50505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561193e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611935906146dc565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156119b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119af906146bc565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060136000838152602001908152602001600020600060028110611a2757611a26614c41565b5b018054611a3390614ad7565b80601f0160208091040260200160405190810160405280929190818152602001828054611a5f90614ad7565b8015611aac5780601f10611a8157610100808354040283529160200191611aac565b820191906000526020600020905b815481529060010190602001808311611a8f57829003601f168201915b50505050509050919050565b6000600854905090565b80601760008481526020019081526020016000209080519060200190611ae992919061354b565b505050565b606060008060005b600b54811015611bc957611b0986612e83565b8051906020012060106000838152602001908152602001600020600060038110611b3657611b35614c41565b5b01604051611b4491906144bb565b6040518091039020148015611ba25750611b5d85612e83565b8051906020012060106000838152602001908152602001600020600160038110611b8a57611b89614c41565b5b01604051611b9891906144bb565b6040518091039020145b15611bb6578280611bb290614b3a565b9350505b8080611bc190614b3a565b915050611af6565b5060008267ffffffffffffffff811115611be657611be5614c70565b5b604051908082528060200260200182016040528015611c1957816020015b6060815260200190600190039081611c045790505b50905060005b600b54811015611dc057611c3287612e83565b8051906020012060106000838152602001908152602001600020600060038110611c5f57611c5e614c41565b5b01604051611c6d91906144bb565b6040518091039020148015611ccb5750611c8686612e83565b8051906020012060106000838152602001908152602001600020600160038110611cb357611cb2614c41565b5b01604051611cc191906144bb565b6040518091039020145b15611dad5760106000828152602001908152602001600020600260038110611cf657611cf5614c41565b5b018054611d0290614ad7565b80601f0160208091040260200160405190810160405280929190818152602001828054611d2e90614ad7565b8015611d7b5780601f10611d5057610100808354040283529160200191611d7b565b820191906000526020600020905b815481529060010190602001808311611d5e57829003601f168201915b5050505050828481518110611d9357611d92614c41565b5b60200260200101819052508280611da990614b3a565b9350505b8080611db890614b3a565b915050611c1f565b5080935050505092915050565b600080600090505b600654811015611e3157828051906020012060156000838152602001908152602001600020604051611e0791906144bb565b60405180910390201415611e1e5780915050611e37565b8080611e2990614b3a565b915050611dd5565b50600090505b919050565b606060018054611e4b90614ad7565b80601f0160208091040260200160405190810160405280929190818152602001828054611e7790614ad7565b8015611ec45780601f10611e9957610100808354040283529160200191611ec4565b820191906000526020600020905b815481529060010190602001808311611ea757829003601f168201915b5050505050905090565b606060008060005b600a54811015611f31578460116000838152602001908152602001600020600060028110611f0757611f06614c41565b5b01541415611f1e578280611f1a90614b3a565b9350505b8080611f2990614b3a565b915050611ed6565b5060008267ffffffffffffffff811115611f4e57611f4d614c70565b5b604051908082528060200260200182016040528015611f7c5781602001602082028036833780820191505090505b50905060005b600a54811015612024578560116000838152602001908152602001600020600060028110611fb357611fb2614c41565b5b015414156120115760116000828152602001908152602001600020600160028110611fe157611fe0614c41565b5b0154828481518110611ff657611ff5614c41565b5b602002602001018181525050828061200d90614b3a565b9350505b808061201c90614b3a565b915050611f82565b50809350505050919050565b612038613677565b60166000838152602001908152602001600020600280602002604051908101604052809291906000905b8282101561210557838201805461207890614ad7565b80601f01602080910402602001604051908101604052809291908181526020018280546120a490614ad7565b80156120f15780601f106120c6576101008083540402835291602001916120f1565b820191906000526020600020905b8154815290600101906020018083116120d457829003601f168201915b505050505081526020019060010190612062565b505050509050919050565b61212261211b612a7d565b83836131be565b5050565b60095481565b60606000600a67ffffffffffffffff81111561214b5761214a614c70565b5b60405190808252806020026020018201604052801561217e57816020015b60608152602001906001900390816121695790505b5090506000805b600d548110156122d15761219885612e83565b80519060200120601260008381526020019081526020016000206000600281106121c5576121c4614c41565b5b016040516121d391906144bb565b604051809103902014156122be576012600082815260200190815260200160002060016002811061220757612206614c41565b5b01805461221390614ad7565b80601f016020809104026020016040519081016040528092919081815260200182805461223f90614ad7565b801561228c5780601f106122615761010080835404028352916020019161228c565b820191906000526020600020905b81548152906001019060200180831161226f57829003601f168201915b50505050508383815181106122a4576122a3614c41565b5b602002602001018190525081806122ba90614b3a565b9250505b80806122c990614b3a565b915050612185565b508192505050919050565b601360205281600052604060002081600281106122f857600080fd5b0160009150915050805461230b90614ad7565b80601f016020809104026020016040519081016040528092919081815260200182805461233790614ad7565b80156123845780601f1061235957610100808354040283529160200191612384565b820191906000526020600020905b81548152906001019060200180831161236757829003601f168201915b505050505081565b61239d612397612a7d565b83612b3e565b6123dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123d39061479c565b60405180910390fd5b6123e88484848461332b565b50505050565b600061240e600b548561240086612e83565b61240986612e83565b610e3d565b600b600081548092919061242190614b3a565b9190505550600b5490509392505050565b606061243d826129a7565b61247c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124739061475c565b60405180910390fd5b60156000838152602001908152602001600020805461249a90614ad7565b80601f01602080910402602001604051908101604052809291908181526020018280546124c690614ad7565b80156125135780601f106124e857610100808354040283529160200191612513565b820191906000526020600020905b8154815290600101906020018083116124f657829003601f168201915b50505050509050919050565b600a5481565b600080600090505b6007548110156125895782805190602001206014600083815260200190815260200160002060405161255f91906144bb565b60405180910390201415612576578091505061258f565b808061258190614b3a565b91505061252d565b50600090505b919050565b60405180604001604052806125a884612e83565b815260200182815250601260008581526020019081526020016000209060026125d2929190613624565b50505050565b600b5481565b601760205280600052604060002060009150905080546125fd90614ad7565b80601f016020809104026020016040519081016040528092919081815260200182805461262990614ad7565b80156126765780601f1061264b57610100808354040283529160200191612676565b820191906000526020600020905b81548152906001019060200180831161265957829003601f168201915b505050505081565b806014600084815260200190815260200160002090805190602001906126a592919061354b565b505050565b60006126b960085484846117fc565b6126fa6008546040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250610fa6565b6008600081548092919061270d90614b3a565b9190505550600854905092915050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60606000600a67ffffffffffffffff8111156127d0576127cf614c70565b5b60405190808252806020026020018201604052801561280357816020015b60608152602001906001900390816127ee5790505b5090506000805b600c548110156129565761281d85612e83565b80519060200120600f600083815260200190815260200160002060006002811061284a57612849614c41565b5b0160405161285891906144bb565b6040518091039020141561294357600f600082815260200190815260200160002060016002811061288c5761288b614c41565b5b01805461289890614ad7565b80601f01602080910402602001604051908101604052809291908181526020018280546128c490614ad7565b80156129115780601f106128e657610100808354040283529160200191612911565b820191906000526020600020905b8154815290600101906020018083116128f457829003601f168201915b505050505083838151811061292957612928614c41565b5b6020026020010181905250818061293f90614b3a565b9250505b808061294e90614b3a565b91505061280a565b508192505050919050565b6040518060400160405280828152602001838152506011600085815260200190815260200160002090600261299792919061369e565b50505050565b6000600a54905090565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16612af883611895565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000612b49826129a7565b612b88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b7f9061467c565b60405180910390fd5b6000612b9383611895565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480612bd55750612bd4818561271d565b5b80612c1357508373ffffffffffffffffffffffffffffffffffffffff16612bfb84610ca0565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16612c3c82611895565b73ffffffffffffffffffffffffffffffffffffffff1614612c92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c89906145fc565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612d02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cf99061463c565b60405180910390fd5b612d0d838383613387565b612d18600082612a85565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612d6891906149ed565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612dbf9190614966565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612e7e83838361338c565b505050565b60606000821415612ecb576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612fdf565b600082905060005b60008214612efd578080612ee690614b3a565b915050600a82612ef691906149bc565b9150612ed3565b60008167ffffffffffffffff811115612f1957612f18614c70565b5b6040519080825280601f01601f191660200182016040528015612f4b5781602001600182028036833780820191505090505b5090505b60008514612fd857600182612f6491906149ed565b9150600a85612f739190614b83565b6030612f7f9190614966565b60f81b818381518110612f9557612f94614c41565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85612fd191906149bc565b9450612f4f565b8093505050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613054576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161304b906146fc565b60405180910390fd5b61305d816129a7565b1561309d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130949061461c565b60405180910390fd5b6130a960008383613387565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546130f99190614966565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46131ba6000838361338c565b5050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561322d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132249061465c565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161331e919061459f565b60405180910390a3505050565b613336848484612c1c565b61334284848484613391565b613381576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613378906145dc565b60405180910390fd5b50505050565b505050565b505050565b60006133b28473ffffffffffffffffffffffffffffffffffffffff16613528565b1561351b578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026133db612a7d565b8786866040518563ffffffff1660e01b81526004016133fd94939291906144ed565b602060405180830381600087803b15801561341757600080fd5b505af192505050801561344857506040513d601f19601f820116820180604052508101906134459190613b07565b60015b6134cb573d8060008114613478576040519150601f19603f3d011682016040523d82523d6000602084013e61347d565b606091505b506000815114156134c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134ba906145dc565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050613520565b600190505b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b82805461355790614ad7565b90600052602060002090601f01602090048101928261357957600085556135c0565b82601f1061359257805160ff19168380011785556135c0565b828001600101855582156135c0579182015b828111156135bf5782518255916020019190600101906135a4565b5b5090506135cd91906136de565b5090565b8260038101928215613613579160200282015b8281111561361257825182908051906020019061360292919061354b565b50916020019190600101906135e4565b5b50905061362091906136fb565b5090565b8260028101928215613666579160200282015b8281111561366557825182908051906020019061365592919061354b565b5091602001919060010190613637565b5b50905061367391906136fb565b5090565b60405180604001604052806002905b60608152602001906001900390816136865790505090565b82600281019282156136cd579160200282015b828111156136cc5782518255916020019190600101906136b1565b5b5090506136da91906136de565b5090565b5b808211156136f75760008160009055506001016136df565b5090565b5b8082111561371b5760008181613712919061371f565b506001016136fc565b5090565b50805461372b90614ad7565b6000825580601f1061373d575061375c565b601f01602090049060005260206000209081019061375b91906136de565b5b50565b600061377261376d846147fc565b6147d7565b90508281526020810184848401111561378e5761378d614ca4565b5b613799848285614a95565b509392505050565b60006137b46137af8461482d565b6147d7565b9050828152602081018484840111156137d0576137cf614ca4565b5b6137db848285614a95565b509392505050565b6000813590506137f2816150f3565b92915050565b6000813590506138078161510a565b92915050565b60008135905061381c81615121565b92915050565b60008151905061383181615121565b92915050565b600082601f83011261384c5761384b614c9f565b5b813561385c84826020860161375f565b91505092915050565b600082601f83011261387a57613879614c9f565b5b813561388a8482602086016137a1565b91505092915050565b6000813590506138a281615138565b92915050565b6000602082840312156138be576138bd614cae565b5b60006138cc848285016137e3565b91505092915050565b600080604083850312156138ec576138eb614cae565b5b60006138fa858286016137e3565b925050602061390b858286016137e3565b9150509250929050565b60008060006060848603121561392e5761392d614cae565b5b600061393c868287016137e3565b935050602061394d868287016137e3565b925050604061395e86828701613893565b9150509250925092565b6000806000806080858703121561398257613981614cae565b5b6000613990878288016137e3565b94505060206139a1878288016137e3565b93505060406139b287828801613893565b925050606085013567ffffffffffffffff8111156139d3576139d2614ca9565b5b6139df87828801613837565b91505092959194509250565b60008060408385031215613a0257613a01614cae565b5b6000613a10858286016137e3565b9250506020613a21858286016137f8565b9150509250929050565b600080600060608486031215613a4457613a43614cae565b5b6000613a52868287016137e3565b935050602084013567ffffffffffffffff811115613a7357613a72614ca9565b5b613a7f86828701613865565b9250506040613a9086828701613893565b9150509250925092565b60008060408385031215613ab157613ab0614cae565b5b6000613abf858286016137e3565b9250506020613ad085828601613893565b9150509250929050565b600060208284031215613af057613aef614cae565b5b6000613afe8482850161380d565b91505092915050565b600060208284031215613b1d57613b1c614cae565b5b6000613b2b84828501613822565b91505092915050565b600060208284031215613b4a57613b49614cae565b5b600082013567ffffffffffffffff811115613b6857613b67614ca9565b5b613b7484828501613865565b91505092915050565b60008060408385031215613b9457613b93614cae565b5b600083013567ffffffffffffffff811115613bb257613bb1614ca9565b5b613bbe85828601613865565b925050602083013567ffffffffffffffff811115613bdf57613bde614ca9565b5b613beb85828601613865565b9150509250929050565b600080600060608486031215613c0e57613c0d614cae565b5b600084013567ffffffffffffffff811115613c2c57613c2b614ca9565b5b613c3886828701613865565b9350506020613c4986828701613893565b9250506040613c5a86828701613893565b9150509250925092565b600060208284031215613c7a57613c79614cae565b5b6000613c8884828501613893565b91505092915050565b60008060408385031215613ca857613ca7614cae565b5b6000613cb685828601613893565b925050602083013567ffffffffffffffff811115613cd757613cd6614ca9565b5b613ce385828601613865565b9150509250929050565b600080600060608486031215613d0657613d05614cae565b5b6000613d1486828701613893565b935050602084013567ffffffffffffffff811115613d3557613d34614ca9565b5b613d4186828701613865565b925050604084013567ffffffffffffffff811115613d6257613d61614ca9565b5b613d6e86828701613865565b9150509250925092565b60008060008060808587031215613d9257613d91614cae565b5b6000613da087828801613893565b945050602085013567ffffffffffffffff811115613dc157613dc0614ca9565b5b613dcd87828801613865565b935050604085013567ffffffffffffffff811115613dee57613ded614ca9565b5b613dfa87828801613865565b925050606085013567ffffffffffffffff811115613e1b57613e1a614ca9565b5b613e2787828801613865565b91505092959194509250565b60008060008060808587031215613e4d57613e4c614cae565b5b6000613e5b87828801613893565b945050602085013567ffffffffffffffff811115613e7c57613e7b614ca9565b5b613e8887828801613865565b935050604085013567ffffffffffffffff811115613ea957613ea8614ca9565b5b613eb587828801613865565b9250506060613ec687828801613893565b91505092959194509250565b60008060408385031215613ee957613ee8614cae565b5b6000613ef785828601613893565b9250506020613f0885828601613893565b9150509250929050565b600080600060608486031215613f2b57613f2a614cae565b5b6000613f3986828701613893565b9350506020613f4a86828701613893565b925050604084013567ffffffffffffffff811115613f6b57613f6a614ca9565b5b613f7786828701613865565b9150509250925092565b600080600060608486031215613f9a57613f99614cae565b5b6000613fa886828701613893565b9350506020613fb986828701613893565b9250506040613fca86828701613893565b9150509250925092565b6000613fe0838361421e565b905092915050565b6000613ff4838361449d565b60208301905092915050565b61400981614a21565b82525050565b600061401a8261489d565b61402481856148fb565b9350836020820285016140368561485e565b8060005b8581101561407257848403895281516140538582613fd4565b945061405e836148d4565b925060208a0199505060018101905061403a565b50829750879550505050505092915050565b600061408f826148a8565b6140998185614906565b9350836020820285016140ab85614868565b8060005b858110156140e757848403895281516140c88582613fd4565b94506140d3836148e1565b925060208a019950506001810190506140af565b50829750879550505050505092915050565b6000614104826148b3565b61410e8185614917565b935061411983614878565b8060005b8381101561414a5781516141318882613fe8565b975061413c836148ee565b92505060018101905061411d565b5085935050505092915050565b61416081614a33565b82525050565b6000614171826148be565b61417b8185614928565b935061418b818560208601614aa4565b61419481614cb3565b840191505092915050565b600081546141ac81614ad7565b6141b68186614939565b945060018216600081146141d157600181146141e257614215565b60ff19831686528186019350614215565b6141eb85614888565b60005b8381101561420d578154818901526001820191506020810190506141ee565b838801955050505b50505092915050565b6000614229826148c9565b6142338185614944565b9350614243818560208601614aa4565b61424c81614cb3565b840191505092915050565b6000614262826148c9565b61426c8185614955565b935061427c818560208601614aa4565b61428581614cb3565b840191505092915050565b600061429d603283614955565b91506142a882614cc4565b604082019050919050565b60006142c0602583614955565b91506142cb82614d13565b604082019050919050565b60006142e3601c83614955565b91506142ee82614d62565b602082019050919050565b6000614306602483614955565b915061431182614d8b565b604082019050919050565b6000614329601983614955565b915061433482614dda565b602082019050919050565b600061434c602c83614955565b915061435782614e03565b604082019050919050565b600061436f603883614955565b915061437a82614e52565b604082019050919050565b6000614392602a83614955565b915061439d82614ea1565b604082019050919050565b60006143b5602983614955565b91506143c082614ef0565b604082019050919050565b60006143d8602083614955565b91506143e382614f3f565b602082019050919050565b60006143fb602c83614955565b915061440682614f68565b604082019050919050565b600061441e602c83614955565b915061442982614fb7565b604082019050919050565b6000614441602f83614955565b915061444c82615006565b604082019050919050565b6000614464602183614955565b915061446f82615055565b604082019050919050565b6000614487603183614955565b9150614492826150a4565b604082019050919050565b6144a681614a8b565b82525050565b6144b581614a8b565b82525050565b60006144c7828461419f565b915081905092915050565b60006020820190506144e76000830184614000565b92915050565b60006080820190506145026000830187614000565b61450f6020830186614000565b61451c60408301856144ac565b818103606083015261452e8184614166565b905095945050505050565b60006020820190508181036000830152614553818461400f565b905092915050565b600060208201905081810360008301526145758184614084565b905092915050565b6000602082019050818103600083015261459781846140f9565b905092915050565b60006020820190506145b46000830184614157565b92915050565b600060208201905081810360008301526145d48184614257565b905092915050565b600060208201905081810360008301526145f581614290565b9050919050565b60006020820190508181036000830152614615816142b3565b9050919050565b60006020820190508181036000830152614635816142d6565b9050919050565b60006020820190508181036000830152614655816142f9565b9050919050565b600060208201905081810360008301526146758161431c565b9050919050565b600060208201905081810360008301526146958161433f565b9050919050565b600060208201905081810360008301526146b581614362565b9050919050565b600060208201905081810360008301526146d581614385565b9050919050565b600060208201905081810360008301526146f5816143a8565b9050919050565b60006020820190508181036000830152614715816143cb565b9050919050565b60006020820190508181036000830152614735816143ee565b9050919050565b6000602082019050818103600083015261475581614411565b9050919050565b6000602082019050818103600083015261477581614434565b9050919050565b6000602082019050818103600083015261479581614457565b9050919050565b600060208201905081810360008301526147b58161447a565b9050919050565b60006020820190506147d160008301846144ac565b92915050565b60006147e16147f2565b90506147ed8282614b09565b919050565b6000604051905090565b600067ffffffffffffffff82111561481757614816614c70565b5b61482082614cb3565b9050602081019050919050565b600067ffffffffffffffff82111561484857614847614c70565b5b61485182614cb3565b9050602081019050919050565b6000819050919050565b6000819050602082019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600060029050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600061497182614a8b565b915061497c83614a8b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156149b1576149b0614bb4565b5b828201905092915050565b60006149c782614a8b565b91506149d283614a8b565b9250826149e2576149e1614be3565b5b828204905092915050565b60006149f882614a8b565b9150614a0383614a8b565b925082821015614a1657614a15614bb4565b5b828203905092915050565b6000614a2c82614a6b565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015614ac2578082015181840152602081019050614aa7565b83811115614ad1576000848401525b50505050565b60006002820490506001821680614aef57607f821691505b60208210811415614b0357614b02614c12565b5b50919050565b614b1282614cb3565b810181811067ffffffffffffffff82111715614b3157614b30614c70565b5b80604052505050565b6000614b4582614a8b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614b7857614b77614bb4565b5b600182019050919050565b6000614b8e82614a8b565b9150614b9983614a8b565b925082614ba957614ba8614be3565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920736574206f66206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b6150fc81614a21565b811461510757600080fd5b50565b61511381614a33565b811461511e57600080fd5b50565b61512a81614a3f565b811461513557600080fd5b50565b61514181614a8b565b811461514c57600080fd5b5056fea26469706673582212200aeedc5da68e1fac606ad560156afa6113218134c34ef91a319b2f75f7189bff64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 27,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 31,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 35,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 39,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 45,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1590,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1592,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_bidIds",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1594,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_eventIds",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1596,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_GrantEventIds",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1598,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_GrantProjectIds",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1600,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_GrantVoteIds",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 1602,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_EventTokenIds",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 1604,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_TokenBidIds",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 1606,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_EventTokenSearchIds",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 1612,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "AllEventTokens",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_array(t_string_storage)2_storage)"
      },
      {
        "astId": 1618,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "AllGrantVotes",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_array(t_string_storage)3_storage)"
      },
      {
        "astId": 1624,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "AllGrantProject",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_array(t_uint256)2_storage)"
      },
      {
        "astId": 1630,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "AllTokensBids",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_array(t_string_storage)2_storage)"
      },
      {
        "astId": 1636,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_SearchedStore",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_array(t_string_storage)2_storage)"
      },
      {
        "astId": 1640,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_bidURIs",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1644,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1650,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_eventURIs",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_uint256,t_array(t_string_storage)2_storage)"
      },
      {
        "astId": 1654,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_GrantEventURIs",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1658,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_JudgerURIs",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1662,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_eventRaised",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1666,
        "contract": "contracts/CeloERC721.sol:CeloERC721",
        "label": "_eventTokens",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_string_memory_ptr,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)2_storage": {
        "base": "t_string_storage",
        "encoding": "inplace",
        "label": "string[2]",
        "numberOfBytes": "64"
      },
      "t_array(t_string_storage)3_storage": {
        "base": "t_string_storage",
        "encoding": "inplace",
        "label": "string[3]",
        "numberOfBytes": "96"
      },
      "t_array(t_uint256)2_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[2]",
        "numberOfBytes": "64"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_string_storage)2_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string[2])",
        "numberOfBytes": "32",
        "value": "t_array(t_string_storage)2_storage"
      },
      "t_mapping(t_uint256,t_array(t_string_storage)3_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string[3])",
        "numberOfBytes": "32",
        "value": "t_array(t_string_storage)3_storage"
      },
      "t_mapping(t_uint256,t_array(t_uint256)2_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[2])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)2_storage"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}